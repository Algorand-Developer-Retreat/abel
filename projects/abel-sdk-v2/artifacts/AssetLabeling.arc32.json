{
    "hints": {
        "change_admin(account)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "add_label(string,string)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "remove_label(string)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_label(string)(string,uint64,uint64)": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "LabelDescriptor",
                    "elements": [
                        [
                            "name",
                            "string"
                        ],
                        [
                            "num_assets",
                            "uint64"
                        ],
                        [
                            "num_operators",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "add_operator_to_label(account,string)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "remove_operator_from_label(account,string)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_operator_labels(account)string[]": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "add_label_to_asset(string,asset)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "remove_label_from_asset(string,asset)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_asset_labels(asset)string[]": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "state": {
        "global": {
            "num_byte_slices": 1,
            "num_uints": 0
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "admin": {
                    "type": "bytes",
                    "key": "admin"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "AssetLabeling",
        "methods": [
            {
                "name": "change_admin",
                "args": [
                    {
                        "type": "account",
                        "name": "new_admin"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "add_label",
                "args": [
                    {
                        "type": "string",
                        "name": "id"
                    },
                    {
                        "type": "string",
                        "name": "name"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "remove_label",
                "args": [
                    {
                        "type": "string",
                        "name": "id"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "get_label",
                "args": [
                    {
                        "type": "string",
                        "name": "id"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "(string,uint64,uint64)"
                }
            },
            {
                "name": "add_operator_to_label",
                "args": [
                    {
                        "type": "account",
                        "name": "operator"
                    },
                    {
                        "type": "string",
                        "name": "label"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "remove_operator_from_label",
                "args": [
                    {
                        "type": "account",
                        "name": "operator"
                    },
                    {
                        "type": "string",
                        "name": "label"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "get_operator_labels",
                "args": [
                    {
                        "type": "account",
                        "name": "operator"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "string[]"
                }
            },
            {
                "name": "add_label_to_asset",
                "args": [
                    {
                        "type": "string",
                        "name": "label"
                    },
                    {
                        "type": "asset",
                        "name": "asset"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "remove_label_from_asset",
                "args": [
                    {
                        "type": "string",
                        "name": "label"
                    },
                    {
                        "type": "asset",
                        "name": "asset"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "get_asset_labels",
                "args": [
                    {
                        "type": "asset",
                        "name": "asset"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "string[]"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}
{
    "name": "AssetLabeling",
    "structs": {
        "AssetFull": [
            {
                "name": "name",
                "type": "string"
            },
            {
                "name": "unit_name",
                "type": "string"
            },
            {
                "name": "url",
                "type": "string"
            },
            {
                "name": "total",
                "type": "uint64"
            },
            {
                "name": "decimals",
                "type": "uint8"
            },
            {
                "name": "creator",
                "type": "address"
            },
            {
                "name": "manager",
                "type": "address"
            },
            {
                "name": "freeze",
                "type": "address"
            },
            {
                "name": "clawback",
                "type": "address"
            },
            {
                "name": "reserve",
                "type": "address"
            },
            {
                "name": "default_frozen",
                "type": "bool"
            },
            {
                "name": "metadata_hash",
                "type": "byte[]"
            },
            {
                "name": "reserve_balance",
                "type": "uint64"
            },
            {
                "name": "labels",
                "type": "string[]"
            }
        ],
        "AssetMicro": [
            {
                "name": "unit_name",
                "type": "string"
            },
            {
                "name": "decimals",
                "type": "uint8"
            }
        ],
        "AssetMicroLabels": [
            {
                "name": "unit_name",
                "type": "string"
            },
            {
                "name": "decimals",
                "type": "uint8"
            },
            {
                "name": "labels",
                "type": "string[]"
            }
        ],
        "AssetSmall": [
            {
                "name": "name",
                "type": "string"
            },
            {
                "name": "unit_name",
                "type": "string"
            },
            {
                "name": "decimals",
                "type": "uint8"
            },
            {
                "name": "total",
                "type": "uint64"
            },
            {
                "name": "has_freeze",
                "type": "bool"
            },
            {
                "name": "has_clawback",
                "type": "bool"
            },
            {
                "name": "labels",
                "type": "string[]"
            }
        ],
        "AssetText": [
            {
                "name": "name",
                "type": "string"
            },
            {
                "name": "unit_name",
                "type": "string"
            },
            {
                "name": "url",
                "type": "string"
            }
        ],
        "AssetTextLabels": [
            {
                "name": "name",
                "type": "string"
            },
            {
                "name": "unit_name",
                "type": "string"
            },
            {
                "name": "url",
                "type": "string"
            },
            {
                "name": "labels",
                "type": "string[]"
            }
        ],
        "AssetTiny": [
            {
                "name": "name",
                "type": "string"
            },
            {
                "name": "unit_name",
                "type": "string"
            },
            {
                "name": "decimals",
                "type": "uint8"
            }
        ],
        "AssetTinyLabels": [
            {
                "name": "name",
                "type": "string"
            },
            {
                "name": "unit_name",
                "type": "string"
            },
            {
                "name": "decimals",
                "type": "uint8"
            },
            {
                "name": "labels",
                "type": "string[]"
            }
        ],
        "LabelDescriptor": [
            {
                "name": "name",
                "type": "string"
            },
            {
                "name": "url",
                "type": "string"
            },
            {
                "name": "num_assets",
                "type": "uint64"
            },
            {
                "name": "num_operators",
                "type": "uint64"
            }
        ]
    },
    "methods": [
        {
            "name": "change_admin",
            "args": [
                {
                    "type": "account",
                    "name": "new_admin"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "add_label",
            "args": [
                {
                    "type": "string",
                    "name": "id"
                },
                {
                    "type": "string",
                    "name": "name"
                },
                {
                    "type": "string",
                    "name": "url"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "has_label",
            "args": [
                {
                    "type": "string",
                    "name": "id"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "change_label",
            "args": [
                {
                    "type": "string",
                    "name": "id"
                },
                {
                    "type": "string",
                    "name": "name"
                },
                {
                    "type": "string",
                    "name": "url"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "remove_label",
            "args": [
                {
                    "type": "string",
                    "name": "id"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_label",
            "args": [
                {
                    "type": "string",
                    "name": "id"
                }
            ],
            "returns": {
                "type": "(string,string,uint64,uint64)",
                "struct": "LabelDescriptor"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "log_labels",
            "args": [
                {
                    "type": "string[]",
                    "name": "ids"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "add_operator_to_label",
            "args": [
                {
                    "type": "account",
                    "name": "operator"
                },
                {
                    "type": "string",
                    "name": "label"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "has_operator_label",
            "args": [
                {
                    "type": "account",
                    "name": "operator"
                },
                {
                    "type": "string",
                    "name": "label"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "remove_operator_from_label",
            "args": [
                {
                    "type": "account",
                    "name": "operator"
                },
                {
                    "type": "string",
                    "name": "label"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_operator_labels",
            "args": [
                {
                    "type": "account",
                    "name": "operator"
                }
            ],
            "returns": {
                "type": "string[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "add_label_to_asset",
            "args": [
                {
                    "type": "string",
                    "name": "label"
                },
                {
                    "type": "asset",
                    "name": "asset"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "add_label_to_assets",
            "args": [
                {
                    "type": "string",
                    "name": "label"
                },
                {
                    "type": "uint64[]",
                    "name": "assets"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "remove_label_from_asset",
            "args": [
                {
                    "type": "string",
                    "name": "label"
                },
                {
                    "type": "asset",
                    "name": "asset"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "has_asset_label",
            "args": [
                {
                    "type": "uint64",
                    "name": "asset_id"
                },
                {
                    "type": "string",
                    "name": "label"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_asset_labels",
            "args": [
                {
                    "type": "asset",
                    "name": "asset"
                }
            ],
            "returns": {
                "type": "string[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_assets_labels",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "assets"
                }
            ],
            "returns": {
                "type": "string[][]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "log_assets_labels",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "assets"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_asset_micro",
            "args": [
                {
                    "type": "uint64",
                    "name": "asset"
                }
            ],
            "returns": {
                "type": "(string,uint8)",
                "struct": "AssetMicro"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_assets_micro",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "assets"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_asset_micro_labels",
            "args": [
                {
                    "type": "uint64",
                    "name": "asset"
                }
            ],
            "returns": {
                "type": "(string,uint8,string[])",
                "struct": "AssetMicroLabels"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_assets_micro_labels",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "assets"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_asset_tiny",
            "args": [
                {
                    "type": "uint64",
                    "name": "asset"
                }
            ],
            "returns": {
                "type": "(string,string,uint8)",
                "struct": "AssetTiny"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_assets_tiny",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "assets"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_asset_tiny_labels",
            "args": [
                {
                    "type": "uint64",
                    "name": "asset"
                }
            ],
            "returns": {
                "type": "(string,string,uint8,string[])",
                "struct": "AssetTinyLabels"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_assets_tiny_labels",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "assets"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_asset_text",
            "args": [
                {
                    "type": "uint64",
                    "name": "asset"
                }
            ],
            "returns": {
                "type": "(string,string,string)",
                "struct": "AssetText"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_assets_text",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "assets"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_asset_text_labels",
            "args": [
                {
                    "type": "uint64",
                    "name": "asset"
                }
            ],
            "returns": {
                "type": "(string,string,string,string[])",
                "struct": "AssetTextLabels"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_assets_text_labels",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "assets"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_asset_small",
            "args": [
                {
                    "type": "uint64",
                    "name": "asset"
                }
            ],
            "returns": {
                "type": "(string,string,uint8,uint64,bool,bool,string[])",
                "struct": "AssetSmall"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_assets_small",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "assets"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_asset_full",
            "args": [
                {
                    "type": "uint64",
                    "name": "asset"
                }
            ],
            "returns": {
                "type": "(string,string,string,uint64,uint8,address,address,address,address,address,bool,byte[],uint64,string[])",
                "struct": "AssetFull"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_assets_full",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "assets"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 1
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "admin": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "YWRtaW4="
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "labels": {
                    "keyType": "AVMString",
                    "valueType": "LabelDescriptor",
                    "prefix": ""
                },
                "assets": {
                    "keyType": "AVMUint64",
                    "valueType": "string[]",
                    "prefix": ""
                },
                "operators": {
                    "keyType": "AVMBytes",
                    "valueType": "string[]",
                    "prefix": ""
                }
            }
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": [
            "DeleteApplication",
            "UpdateApplication"
        ]
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        1627,
                        1644,
                        2126,
                        2145,
                        2660
                    ],
                    "errorMessage": "Index access is out of bounds"
                },
                {
                    "pc": [
                        376,
                        391,
                        411,
                        426,
                        446,
                        461,
                        481,
                        496,
                        516,
                        531,
                        551,
                        566,
                        586,
                        601,
                        621,
                        636,
                        656,
                        671,
                        690,
                        712,
                        739,
                        763,
                        784,
                        808,
                        830,
                        854,
                        883,
                        907,
                        922,
                        944,
                        962,
                        992,
                        1015,
                        1045
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        4126
                    ],
                    "errorMessage": "account opted into asset"
                },
                {
                    "pc": [
                        3044,
                        3052,
                        3144,
                        3154,
                        3279,
                        3287,
                        3295,
                        3400,
                        3410,
                        3420,
                        3567,
                        3575,
                        3583,
                        3697,
                        3707,
                        3717,
                        3878,
                        3888,
                        3898,
                        3914,
                        3922,
                        3938,
                        4110,
                        4131,
                        4141,
                        4151,
                        4161,
                        4169,
                        4188,
                        4196,
                        4204,
                        4212,
                        4220,
                        4225,
                        4238
                    ],
                    "errorMessage": "asset exists"
                },
                {
                    "pc": [
                        1098
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        379,
                        394,
                        414,
                        429,
                        449,
                        464,
                        484,
                        499,
                        519,
                        534,
                        554,
                        569,
                        589,
                        604,
                        624,
                        639,
                        659,
                        674,
                        693,
                        715,
                        742,
                        766,
                        787,
                        811,
                        833,
                        857,
                        886,
                        910,
                        925,
                        947,
                        965,
                        995,
                        1018,
                        1048,
                        1081,
                        1089
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        1364,
                        1741
                    ],
                    "errorMessage": "check self.admin exists"
                },
                {
                    "pc": [
                        2362,
                        2472,
                        2641,
                        2652,
                        2733,
                        2862,
                        2909,
                        3009,
                        3181,
                        3447,
                        3738,
                        3965,
                        4267
                    ],
                    "errorMessage": "check self.assets entry exists"
                },
                {
                    "pc": [
                        1513,
                        1626,
                        1643,
                        1679,
                        1722,
                        1954,
                        2125,
                        2495,
                        2696
                    ],
                    "errorMessage": "check self.labels entry exists"
                },
                {
                    "pc": [
                        1819,
                        1928,
                        2184,
                        2209,
                        2313
                    ],
                    "errorMessage": "check self.operators entry exists"
                },
                {
                    "pc": [
                        3058,
                        3160,
                        3301,
                        3426,
                        3904,
                        4175
                    ],
                    "errorMessage": "overflow"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "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",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 6,
            "patch": 1
        }
    },
    "events": [],
    "templateVariables": {}
}
{
    "name": "AssetLabeling",
    "structs": {
        "AssetFull": [
            {
                "name": "name",
                "type": "string"
            },
            {
                "name": "unit_name",
                "type": "string"
            },
            {
                "name": "url",
                "type": "string"
            },
            {
                "name": "total",
                "type": "uint64"
            },
            {
                "name": "decimals",
                "type": "uint8"
            },
            {
                "name": "creator",
                "type": "address"
            },
            {
                "name": "manager",
                "type": "address"
            },
            {
                "name": "freeze",
                "type": "address"
            },
            {
                "name": "clawback",
                "type": "address"
            },
            {
                "name": "reserve",
                "type": "address"
            },
            {
                "name": "default_frozen",
                "type": "bool"
            },
            {
                "name": "metadata_hash",
                "type": "byte[]"
            },
            {
                "name": "reserve_balance",
                "type": "uint64"
            },
            {
                "name": "labels",
                "type": "string[]"
            }
        ],
        "AssetMicro": [
            {
                "name": "unit_name",
                "type": "string"
            },
            {
                "name": "decimals",
                "type": "uint8"
            }
        ],
        "AssetMicroLabels": [
            {
                "name": "unit_name",
                "type": "string"
            },
            {
                "name": "decimals",
                "type": "uint8"
            },
            {
                "name": "labels",
                "type": "string[]"
            }
        ],
        "AssetSmall": [
            {
                "name": "name",
                "type": "string"
            },
            {
                "name": "unit_name",
                "type": "string"
            },
            {
                "name": "decimals",
                "type": "uint8"
            },
            {
                "name": "total",
                "type": "uint64"
            },
            {
                "name": "has_freeze",
                "type": "bool"
            },
            {
                "name": "has_clawback",
                "type": "bool"
            },
            {
                "name": "labels",
                "type": "string[]"
            }
        ],
        "AssetText": [
            {
                "name": "name",
                "type": "string"
            },
            {
                "name": "unit_name",
                "type": "string"
            },
            {
                "name": "url",
                "type": "string"
            }
        ],
        "AssetTextLabels": [
            {
                "name": "name",
                "type": "string"
            },
            {
                "name": "unit_name",
                "type": "string"
            },
            {
                "name": "url",
                "type": "string"
            },
            {
                "name": "labels",
                "type": "string[]"
            }
        ],
        "AssetTiny": [
            {
                "name": "name",
                "type": "string"
            },
            {
                "name": "unit_name",
                "type": "string"
            },
            {
                "name": "decimals",
                "type": "uint8"
            }
        ],
        "AssetTinyLabels": [
            {
                "name": "name",
                "type": "string"
            },
            {
                "name": "unit_name",
                "type": "string"
            },
            {
                "name": "decimals",
                "type": "uint8"
            },
            {
                "name": "labels",
                "type": "string[]"
            }
        ],
        "LabelDescriptor": [
            {
                "name": "name",
                "type": "string"
            },
            {
                "name": "url",
                "type": "string"
            },
            {
                "name": "num_assets",
                "type": "uint64"
            },
            {
                "name": "num_operators",
                "type": "uint64"
            }
        ]
    },
    "methods": [
        {
            "name": "change_admin",
            "args": [
                {
                    "type": "account",
                    "name": "new_admin"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "add_label",
            "args": [
                {
                    "type": "string",
                    "name": "id"
                },
                {
                    "type": "string",
                    "name": "name"
                },
                {
                    "type": "string",
                    "name": "url"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "has_label",
            "args": [
                {
                    "type": "string",
                    "name": "id"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "change_label",
            "args": [
                {
                    "type": "string",
                    "name": "id"
                },
                {
                    "type": "string",
                    "name": "name"
                },
                {
                    "type": "string",
                    "name": "url"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "remove_label",
            "args": [
                {
                    "type": "string",
                    "name": "id"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_label",
            "args": [
                {
                    "type": "string",
                    "name": "id"
                }
            ],
            "returns": {
                "type": "(string,string,uint64,uint64)",
                "struct": "LabelDescriptor"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "log_labels",
            "args": [
                {
                    "type": "string[]",
                    "name": "ids"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "add_operator_to_label",
            "args": [
                {
                    "type": "account",
                    "name": "operator"
                },
                {
                    "type": "string",
                    "name": "label"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "has_operator_label",
            "args": [
                {
                    "type": "account",
                    "name": "operator"
                },
                {
                    "type": "string",
                    "name": "label"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "remove_operator_from_label",
            "args": [
                {
                    "type": "account",
                    "name": "operator"
                },
                {
                    "type": "string",
                    "name": "label"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_operator_labels",
            "args": [
                {
                    "type": "account",
                    "name": "operator"
                }
            ],
            "returns": {
                "type": "string[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "add_label_to_asset",
            "args": [
                {
                    "type": "string",
                    "name": "label"
                },
                {
                    "type": "asset",
                    "name": "asset"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "add_label_to_assets",
            "args": [
                {
                    "type": "string",
                    "name": "label"
                },
                {
                    "type": "uint64[]",
                    "name": "assets"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "remove_label_from_asset",
            "args": [
                {
                    "type": "string",
                    "name": "label"
                },
                {
                    "type": "asset",
                    "name": "asset"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "has_asset_label",
            "args": [
                {
                    "type": "uint64",
                    "name": "asset_id"
                },
                {
                    "type": "string",
                    "name": "label"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_asset_labels",
            "args": [
                {
                    "type": "asset",
                    "name": "asset"
                }
            ],
            "returns": {
                "type": "string[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_assets_labels",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "assets"
                }
            ],
            "returns": {
                "type": "string[][]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "log_assets_labels",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "assets"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_asset_micro",
            "args": [
                {
                    "type": "uint64",
                    "name": "asset"
                }
            ],
            "returns": {
                "type": "(string,uint8)",
                "struct": "AssetMicro"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_assets_micro",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "assets"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_asset_micro_labels",
            "args": [
                {
                    "type": "uint64",
                    "name": "asset"
                }
            ],
            "returns": {
                "type": "(string,uint8,string[])",
                "struct": "AssetMicroLabels"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_assets_micro_labels",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "assets"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_asset_tiny",
            "args": [
                {
                    "type": "uint64",
                    "name": "asset"
                }
            ],
            "returns": {
                "type": "(string,string,uint8)",
                "struct": "AssetTiny"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_assets_tiny",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "assets"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_asset_tiny_labels",
            "args": [
                {
                    "type": "uint64",
                    "name": "asset"
                }
            ],
            "returns": {
                "type": "(string,string,uint8,string[])",
                "struct": "AssetTinyLabels"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_assets_tiny_labels",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "assets"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_asset_text",
            "args": [
                {
                    "type": "uint64",
                    "name": "asset"
                }
            ],
            "returns": {
                "type": "(string,string,string)",
                "struct": "AssetText"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_assets_text",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "assets"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_asset_text_labels",
            "args": [
                {
                    "type": "uint64",
                    "name": "asset"
                }
            ],
            "returns": {
                "type": "(string,string,string,string[])",
                "struct": "AssetTextLabels"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_assets_text_labels",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "assets"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_asset_small",
            "args": [
                {
                    "type": "uint64",
                    "name": "asset"
                }
            ],
            "returns": {
                "type": "(string,string,uint8,uint64,bool,bool,string[])",
                "struct": "AssetSmall"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_assets_small",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "assets"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_asset_full",
            "args": [
                {
                    "type": "uint64",
                    "name": "asset"
                }
            ],
            "returns": {
                "type": "(string,string,string,uint64,uint8,address,address,address,address,address,bool,byte[],uint64,string[])",
                "struct": "AssetFull"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_assets_full",
            "args": [
                {
                    "type": "uint64[]",
                    "name": "assets"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 1
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "admin": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "YWRtaW4="
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "labels": {
                    "keyType": "AVMString",
                    "valueType": "LabelDescriptor",
                    "prefix": ""
                },
                "assets": {
                    "keyType": "AVMUint64",
                    "valueType": "string[]",
                    "prefix": ""
                },
                "operators": {
                    "keyType": "AVMBytes",
                    "valueType": "string[]",
                    "prefix": ""
                }
            }
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": [
            "DeleteApplication",
            "UpdateApplication"
        ]
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        1627,
                        1644,
                        2126,
                        2145,
                        2660
                    ],
                    "errorMessage": "Index access is out of bounds"
                },
                {
                    "pc": [
                        376,
                        391,
                        411,
                        426,
                        446,
                        461,
                        481,
                        496,
                        516,
                        531,
                        551,
                        566,
                        586,
                        601,
                        621,
                        636,
                        656,
                        671,
                        690,
                        712,
                        739,
                        763,
                        784,
                        808,
                        830,
                        854,
                        883,
                        907,
                        922,
                        944,
                        962,
                        992,
                        1015,
                        1045
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        3978
                    ],
                    "errorMessage": "account opted into asset"
                },
                {
                    "pc": [
                        3033,
                        3041,
                        3117,
                        3125,
                        3235,
                        3243,
                        3251,
                        3340,
                        3348,
                        3356,
                        3488,
                        3496,
                        3504,
                        3602,
                        3610,
                        3618,
                        3759,
                        3767,
                        3775,
                        3789,
                        3795,
                        3809,
                        3962,
                        3983,
                        3993,
                        4003,
                        4013,
                        4021,
                        4040,
                        4048,
                        4056,
                        4064,
                        4072,
                        4077,
                        4090
                    ],
                    "errorMessage": "asset exists"
                },
                {
                    "pc": [
                        1098
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        379,
                        394,
                        414,
                        429,
                        449,
                        464,
                        484,
                        499,
                        519,
                        534,
                        554,
                        569,
                        589,
                        604,
                        624,
                        639,
                        659,
                        674,
                        693,
                        715,
                        742,
                        766,
                        787,
                        811,
                        833,
                        857,
                        886,
                        910,
                        925,
                        947,
                        965,
                        995,
                        1018,
                        1048,
                        1081,
                        1089
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        1364,
                        1741
                    ],
                    "errorMessage": "check self.admin exists"
                },
                {
                    "pc": [
                        2362,
                        2472,
                        2641,
                        2652,
                        2733,
                        2862,
                        2909,
                        3009,
                        3148,
                        3379,
                        3635,
                        3832,
                        4119
                    ],
                    "errorMessage": "check self.assets entry exists"
                },
                {
                    "pc": [
                        1513,
                        1626,
                        1643,
                        1679,
                        1722,
                        1954,
                        2125,
                        2495,
                        2696
                    ],
                    "errorMessage": "check self.labels entry exists"
                },
                {
                    "pc": [
                        1819,
                        1928,
                        2184,
                        2209,
                        2313
                    ],
                    "errorMessage": "check self.operators entry exists"
                },
                {
                    "pc": [
                        3047,
                        3131,
                        3257,
                        3362,
                        3781,
                        4027
                    ],
                    "errorMessage": "overflow"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "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",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 6,
            "patch": 1
        }
    },
    "events": [],
    "templateVariables": {}
}
#pragma version 10
#pragma typetrack false

// smart_contracts.asset_labeling.contract.AssetLabeling.__algopy_entrypoint_with_init() -> uint64:
main:
    intcblock 1 0 2 4294967295 4294967296
    bytecblock "ERR:NOEXIST" "admin" "" 0x151f7c75 "ERR:EXISTS" "ERR:UNAUTH" "ERR:LENGTH" 0x0000000000000000 "ERR:NOEMPTY" 0x0002 0x0001 0x0000
    txn ApplicationID
    bnz main_after_if_else@2
    // smart_contracts/asset_labeling/contract.py:40
    // self.admin = Txn.sender
    bytec_1 // "admin"
    txn Sender
    app_global_put

main_after_if_else@2:
    // smart_contracts/asset_labeling/contract.py:38
    // class AssetLabeling(ARC4Contract):
    txn NumAppArgs
    bz main_bare_routing@15
    pushbytess 0x8f0d7d8e 0x7c1b32f6 0x17e691ae 0x33d0ffdc 0xfac1cf1b 0xb4c50b9f 0xa2dd2247 0xa37dea11 0x68f18efa 0xc2ed743f // method "change_admin(account)void", method "add_label(string,string)void", method "remove_label(string)void", method "get_label(string)(string,uint64,uint64)", method "add_operator_to_label(account,string)void", method "remove_operator_from_label(account,string)void", method "get_operator_labels(account)string[]", method "add_label_to_asset(string,asset)void", method "remove_label_from_asset(string,asset)void", method "get_asset_labels(asset)string[]"
    txna ApplicationArgs 0
    match main_change_admin_route@5 main_add_label_route@6 main_remove_label_route@7 main_get_label_route@8 main_add_operator_to_label_route@9 main_remove_operator_from_label_route@10 main_get_operator_labels_route@11 main_add_label_to_asset_route@12 main_remove_label_from_asset_route@13 main_get_asset_labels_route@14

main_after_if_else@17:
    // smart_contracts/asset_labeling/contract.py:38
    // class AssetLabeling(ARC4Contract):
    intc_1 // 0
    return

main_get_asset_labels_route@14:
    // smart_contracts/asset_labeling/contract.py:249
    // @abimethod(readonly=True)
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/asset_labeling/contract.py:38
    // class AssetLabeling(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Assets
    // smart_contracts/asset_labeling/contract.py:249
    // @abimethod(readonly=True)
    callsub get_asset_labels
    bytec_3 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_remove_label_from_asset_route@13:
    // smart_contracts/asset_labeling/contract.py:215
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/asset_labeling/contract.py:38
    // class AssetLabeling(ARC4Contract):
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    btoi
    txnas Assets
    // smart_contracts/asset_labeling/contract.py:215
    // @abimethod()
    callsub remove_label_from_asset
    intc_0 // 1
    return

main_add_label_to_asset_route@12:
    // smart_contracts/asset_labeling/contract.py:187
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/asset_labeling/contract.py:38
    // class AssetLabeling(ARC4Contract):
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    btoi
    txnas Assets
    // smart_contracts/asset_labeling/contract.py:187
    // @abimethod()
    callsub add_label_to_asset
    intc_0 // 1
    return

main_get_operator_labels_route@11:
    // smart_contracts/asset_labeling/contract.py:173
    // @abimethod(readonly=True)
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/asset_labeling/contract.py:38
    // class AssetLabeling(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    // smart_contracts/asset_labeling/contract.py:173
    // @abimethod(readonly=True)
    callsub get_operator_labels
    bytec_3 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_remove_operator_from_label_route@10:
    // smart_contracts/asset_labeling/contract.py:132
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/asset_labeling/contract.py:38
    // class AssetLabeling(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    txna ApplicationArgs 2
    extract 2 0
    // smart_contracts/asset_labeling/contract.py:132
    // @abimethod()
    callsub remove_operator_from_label
    intc_0 // 1
    return

main_add_operator_to_label_route@9:
    // smart_contracts/asset_labeling/contract.py:104
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/asset_labeling/contract.py:38
    // class AssetLabeling(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    txna ApplicationArgs 2
    extract 2 0
    // smart_contracts/asset_labeling/contract.py:104
    // @abimethod()
    callsub add_operator_to_label
    intc_0 // 1
    return

main_get_label_route@8:
    // smart_contracts/asset_labeling/contract.py:73
    // @abimethod(readonly=True)
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/asset_labeling/contract.py:38
    // class AssetLabeling(ARC4Contract):
    txna ApplicationArgs 1
    extract 2 0
    // smart_contracts/asset_labeling/contract.py:73
    // @abimethod(readonly=True)
    callsub get_label
    bytec_3 // 0x151f7c75
    swap
    concat
    log
    intc_0 // 1
    return

main_remove_label_route@7:
    // smart_contracts/asset_labeling/contract.py:65
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/asset_labeling/contract.py:38
    // class AssetLabeling(ARC4Contract):
    txna ApplicationArgs 1
    extract 2 0
    // smart_contracts/asset_labeling/contract.py:65
    // @abimethod()
    callsub remove_label
    intc_0 // 1
    return

main_add_label_route@6:
    // smart_contracts/asset_labeling/contract.py:54
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/asset_labeling/contract.py:38
    // class AssetLabeling(ARC4Contract):
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    extract 2 0
    // smart_contracts/asset_labeling/contract.py:54
    // @abimethod()
    callsub add_label
    intc_0 // 1
    return

main_change_admin_route@5:
    // smart_contracts/asset_labeling/contract.py:49
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/asset_labeling/contract.py:38
    // class AssetLabeling(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    // smart_contracts/asset_labeling/contract.py:49
    // @abimethod()
    callsub change_admin
    intc_0 // 1
    return

main_bare_routing@15:
    // smart_contracts/asset_labeling/contract.py:38
    // class AssetLabeling(ARC4Contract):
    txn OnCompletion
    bnz main_after_if_else@17
    txn ApplicationID
    !
    assert // can only call when creating
    intc_0 // 1
    return


// _puya_lib.arc4.dynamic_array_concat_byte_length_head(array: bytes, new_items_bytes: bytes, new_items_count: uint64) -> bytes:
dynamic_array_concat_byte_length_head:
    proto 3 1
    frame_dig -3
    intc_1 // 0
    extract_uint16
    dup
    frame_dig -1
    +
    swap
    intc_2 // 2
    *
    intc_2 // 2
    +
    dig 1
    itob
    extract 6 2
    cover 2
    frame_dig -3
    intc_2 // 2
    dig 2
    substring3
    frame_dig -1
    intc_2 // 2
    *
    bzero
    concat
    frame_dig -3
    len
    frame_dig -3
    uncover 3
    uncover 2
    substring3
    concat
    frame_dig -2
    concat
    swap
    intc_2 // 2
    *
    dup
    intc_1 // 0
    swap

dynamic_array_concat_byte_length_head_for_header@2:
    frame_dig 3
    frame_dig 2
    <
    bz dynamic_array_concat_byte_length_head_after_for@5
    frame_dig 4
    dup
    itob
    extract 6 2
    frame_dig 1
    frame_dig 3
    dup
    cover 4
    uncover 2
    replace3
    dup
    frame_bury 1
    dig 1
    extract_uint16
    intc_2 // 2
    +
    +
    frame_bury 4
    intc_2 // 2
    +
    frame_bury 3
    b dynamic_array_concat_byte_length_head_for_header@2

dynamic_array_concat_byte_length_head_after_for@5:
    frame_dig 0
    frame_dig 1
    concat
    frame_bury 0
    retsub


// smart_contracts.asset_labeling.contract.AssetLabeling.admin_only() -> void:
admin_only:
    // smart_contracts/asset_labeling/contract.py:47
    // ensure(Txn.sender == self.admin, S("ERR:UNAUTH"))
    txn Sender
    intc_1 // 0
    bytec_1 // "admin"
    app_global_get_ex
    assert // check self.admin exists
    ==
    // smart_contracts/asset_labeling/contract.py:27
    // if not cond:
    bnz admin_only_after_if_else@3
    // smart_contracts/asset_labeling/contract.py:47
    // ensure(Txn.sender == self.admin, S("ERR:UNAUTH"))
    bytec 5 // "ERR:UNAUTH"
    // smart_contracts/asset_labeling/contract.py:28
    // log(msg)
    log
    // smart_contracts/asset_labeling/contract.py:29
    // op.err()
    err

admin_only_after_if_else@3:
    retsub


// smart_contracts.asset_labeling.contract.AssetLabeling.change_admin(new_admin: bytes) -> void:
change_admin:
    // smart_contracts/asset_labeling/contract.py:49-50
    // @abimethod()
    // def change_admin(self, new_admin: Account) -> None:
    proto 1 0
    // smart_contracts/asset_labeling/contract.py:51
    // self.admin_only()
    callsub admin_only
    // smart_contracts/asset_labeling/contract.py:52
    // self.admin = new_admin
    bytec_1 // "admin"
    frame_dig -1
    app_global_put
    retsub


// smart_contracts.asset_labeling.contract.AssetLabeling.add_label(id: bytes, name: bytes) -> void:
add_label:
    // smart_contracts/asset_labeling/contract.py:54-55
    // @abimethod()
    // def add_label(self, id: String, name: String) -> None:
    proto 2 0
    // smart_contracts/asset_labeling/contract.py:56
    // self.admin_only()
    callsub admin_only
    // smart_contracts/asset_labeling/contract.py:57
    // ensure(id not in self.labels, S("ERR:EXISTS"))
    frame_dig -2
    box_len
    bury 1
    // smart_contracts/asset_labeling/contract.py:27
    // if not cond:
    bz add_label_after_if_else@3
    // smart_contracts/asset_labeling/contract.py:57
    // ensure(id not in self.labels, S("ERR:EXISTS"))
    bytec 4 // "ERR:EXISTS"
    // smart_contracts/asset_labeling/contract.py:28
    // log(msg)
    log
    // smart_contracts/asset_labeling/contract.py:29
    // op.err()
    err

add_label_after_if_else@3:
    // smart_contracts/asset_labeling/contract.py:58
    // ensure(id.bytes.length == 2, S("ERR:LENGTH"))
    frame_dig -2
    len
    intc_2 // 2
    ==
    // smart_contracts/asset_labeling/contract.py:27
    // if not cond:
    bnz add_label_after_if_else@7
    // smart_contracts/asset_labeling/contract.py:58
    // ensure(id.bytes.length == 2, S("ERR:LENGTH"))
    bytec 6 // "ERR:LENGTH"
    // smart_contracts/asset_labeling/contract.py:28
    // log(msg)
    log
    // smart_contracts/asset_labeling/contract.py:29
    // op.err()
    err

add_label_after_if_else@7:
    // smart_contracts/asset_labeling/contract.py:60
    // arc4.String(name),
    frame_dig -1
    len
    itob
    extract 6 2
    frame_dig -1
    concat
    // smart_contracts/asset_labeling/contract.py:59-63
    // self.labels[id] = LabelDescriptor(
    //     arc4.String(name),
    //     arc4.UInt64(0),
    //     arc4.UInt64(0),
    // )
    pushbytes 0x001200000000000000000000000000000000
    swap
    concat
    frame_dig -2
    box_del
    pop
    frame_dig -2
    swap
    box_put
    retsub


// smart_contracts.asset_labeling.contract.AssetLabeling.remove_label(id: bytes) -> void:
remove_label:
    // smart_contracts/asset_labeling/contract.py:65-66
    // @abimethod()
    // def remove_label(self, id: String) -> None:
    proto 1 0
    // smart_contracts/asset_labeling/contract.py:67
    // self.admin_only()
    callsub admin_only
    // smart_contracts/asset_labeling/contract.py:68
    // ensure(id in self.labels, S("ERR:NOEXIST"))
    frame_dig -1
    box_len
    bury 1
    // smart_contracts/asset_labeling/contract.py:27
    // if not cond:
    bnz remove_label_after_if_else@3
    // smart_contracts/asset_labeling/contract.py:68
    // ensure(id in self.labels, S("ERR:NOEXIST"))
    bytec_0 // "ERR:NOEXIST"
    // smart_contracts/asset_labeling/contract.py:28
    // log(msg)
    log
    // smart_contracts/asset_labeling/contract.py:29
    // op.err()
    err

remove_label_after_if_else@3:
    // smart_contracts/asset_labeling/contract.py:69
    // ensure(id.bytes.length == 2, S("ERR:LENGTH"))
    frame_dig -1
    len
    intc_2 // 2
    ==
    // smart_contracts/asset_labeling/contract.py:27
    // if not cond:
    bnz remove_label_after_if_else@7
    // smart_contracts/asset_labeling/contract.py:69
    // ensure(id.bytes.length == 2, S("ERR:LENGTH"))
    bytec 6 // "ERR:LENGTH"
    // smart_contracts/asset_labeling/contract.py:28
    // log(msg)
    log
    // smart_contracts/asset_labeling/contract.py:29
    // op.err()
    err

remove_label_after_if_else@7:
    // smart_contracts/asset_labeling/contract.py:70
    // ensure(self.labels[id].num_assets == 0, S("ERR:NOEMPTY"))
    frame_dig -1
    box_get
    assert // check self.labels entry exists
    extract 2 8 // on error: Index access is out of bounds
    bytec 7 // 0x0000000000000000
    b==
    // smart_contracts/asset_labeling/contract.py:27
    // if not cond:
    bnz remove_label_after_if_else@11
    // smart_contracts/asset_labeling/contract.py:70
    // ensure(self.labels[id].num_assets == 0, S("ERR:NOEMPTY"))
    bytec 8 // "ERR:NOEMPTY"
    // smart_contracts/asset_labeling/contract.py:28
    // log(msg)
    log
    // smart_contracts/asset_labeling/contract.py:29
    // op.err()
    err

remove_label_after_if_else@11:
    // smart_contracts/asset_labeling/contract.py:71
    // del self.labels[id]
    frame_dig -1
    box_del
    pop
    retsub


// smart_contracts.asset_labeling.contract.AssetLabeling.get_label(id: bytes) -> bytes:
get_label:
    // smart_contracts/asset_labeling/contract.py:73-74
    // @abimethod(readonly=True)
    // def get_label(self, id: String) -> LabelDescriptor:
    proto 1 1
    // smart_contracts/asset_labeling/contract.py:75
    // ensure(id in self.labels, S("ERR:NOEXIST"))
    frame_dig -1
    box_len
    bury 1
    // smart_contracts/asset_labeling/contract.py:27
    // if not cond:
    bnz get_label_after_if_else@3
    // smart_contracts/asset_labeling/contract.py:75
    // ensure(id in self.labels, S("ERR:NOEXIST"))
    bytec_0 // "ERR:NOEXIST"
    // smart_contracts/asset_labeling/contract.py:28
    // log(msg)
    log
    // smart_contracts/asset_labeling/contract.py:29
    // op.err()
    err

get_label_after_if_else@3:
    // smart_contracts/asset_labeling/contract.py:76
    // return self.labels[id]
    frame_dig -1
    box_get
    assert // check self.labels entry exists
    retsub


// smart_contracts.asset_labeling.contract.AssetLabeling.admin_or_operator_only(label: bytes) -> void:
admin_or_operator_only:
    // smart_contracts/asset_labeling/contract.py:80-81
    // @subroutine
    // def admin_or_operator_only(self, label: String) -> None:
    proto 1 0
    // smart_contracts/asset_labeling/contract.py:82
    // if Txn.sender == self.admin:
    txn Sender
    intc_1 // 0
    bytec_1 // "admin"
    app_global_get_ex
    assert // check self.admin exists
    ==
    bz admin_or_operator_only_after_if_else@2
    // smart_contracts/asset_labeling/contract.py:83
    // return
    retsub

admin_or_operator_only_after_if_else@2:
    // smart_contracts/asset_labeling/contract.py:84
    // self.operator_only(label)
    frame_dig -1
    callsub operator_only
    retsub


// smart_contracts.asset_labeling.contract.AssetLabeling.operator_only(label: bytes) -> void:
operator_only:
    // smart_contracts/asset_labeling/contract.py:86-87
    // @subroutine
    // def operator_only(self, label: String) -> None:
    proto 1 0
    // smart_contracts/asset_labeling/contract.py:89
    // self.get_operator_label_index(Txn.sender, label) != UInt64(NOT_FOUND_KEY)
    txn Sender
    frame_dig -1
    callsub get_operator_label_index
    intc 4 // 4294967296
    !=
    // smart_contracts/asset_labeling/contract.py:89-91
    // self.get_operator_label_index(Txn.sender, label) != UInt64(NOT_FOUND_KEY)
    // and self.get_operator_label_index(Txn.sender, label)
    // != UInt64(NOT_FOUND_VALUE),
    bz operator_only_bool_false@3
    // smart_contracts/asset_labeling/contract.py:90
    // and self.get_operator_label_index(Txn.sender, label)
    txn Sender
    frame_dig -1
    callsub get_operator_label_index
    // smart_contracts/asset_labeling/contract.py:91
    // != UInt64(NOT_FOUND_VALUE),
    intc_3 // 4294967295
    // smart_contracts/asset_labeling/contract.py:90-91
    // and self.get_operator_label_index(Txn.sender, label)
    // != UInt64(NOT_FOUND_VALUE),
    !=
    // smart_contracts/asset_labeling/contract.py:89-91
    // self.get_operator_label_index(Txn.sender, label) != UInt64(NOT_FOUND_KEY)
    // and self.get_operator_label_index(Txn.sender, label)
    // != UInt64(NOT_FOUND_VALUE),
    bz operator_only_bool_false@3
    intc_0 // 1

operator_only_bool_merge@4:
    // smart_contracts/asset_labeling/contract.py:27
    // if not cond:
    bnz operator_only_after_if_else@7
    // smart_contracts/asset_labeling/contract.py:92
    // S("ERR:UNAUTH"),
    bytec 5 // "ERR:UNAUTH"
    // smart_contracts/asset_labeling/contract.py:28
    // log(msg)
    log
    // smart_contracts/asset_labeling/contract.py:29
    // op.err()
    err

operator_only_after_if_else@7:
    retsub

operator_only_bool_false@3:
    intc_1 // 0
    b operator_only_bool_merge@4


// smart_contracts.asset_labeling.contract.AssetLabeling.get_operator_label_index(operator: bytes, label: bytes) -> uint64:
get_operator_label_index:
    // smart_contracts/asset_labeling/contract.py:95-96
    // @subroutine
    // def get_operator_label_index(self, operator: Account, label: String) -> UInt64:
    proto 2 1
    intc_1 // 0
    bytec_2 // ""
    dup
    // smart_contracts/asset_labeling/contract.py:97
    // if operator not in self.operators:
    frame_dig -2
    box_len
    bury 1
    bnz get_operator_label_index_after_if_else@2
    // smart_contracts/asset_labeling/contract.py:98
    // return UInt64(NOT_FOUND_KEY)
    intc 4 // 4294967296
    frame_bury 0
    retsub

get_operator_label_index_after_if_else@2:
    // smart_contracts/asset_labeling/contract.py:99
    // for idx, stored_label in uenumerate(self.operators[operator]):
    frame_dig -2
    box_get
    swap
    dup
    cover 2
    frame_bury 0
    assert // check self.operators entry exists
    intc_1 // 0
    extract_uint16
    frame_bury 1
    intc_1 // 0
    frame_bury 2

get_operator_label_index_for_header@3:
    // smart_contracts/asset_labeling/contract.py:99
    // for idx, stored_label in uenumerate(self.operators[operator]):
    frame_dig 2
    frame_dig 1
    <
    bz get_operator_label_index_after_for@8
    frame_dig 0
    extract 2 0
    frame_dig 2
    intc_2 // 2
    *
    dig 1
    swap
    extract_uint16
    dup2
    extract_uint16
    intc_2 // 2
    +
    extract3
    // smart_contracts/asset_labeling/contract.py:100
    // if stored_label == label:
    extract 2 0
    frame_dig -1
    ==
    bz get_operator_label_index_after_if_else@6
    // smart_contracts/asset_labeling/contract.py:101
    // return idx
    frame_dig 2
    frame_bury 0
    retsub

get_operator_label_index_after_if_else@6:
    frame_dig 2
    intc_0 // 1
    +
    frame_bury 2
    b get_operator_label_index_for_header@3

get_operator_label_index_after_for@8:
    // smart_contracts/asset_labeling/contract.py:102
    // return UInt64(NOT_FOUND_VALUE)
    intc_3 // 4294967295
    frame_bury 0
    retsub


// smart_contracts.asset_labeling.contract.AssetLabeling.add_operator_to_label(operator: bytes, label: bytes) -> void:
add_operator_to_label:
    // smart_contracts/asset_labeling/contract.py:104-105
    // @abimethod()
    // def add_operator_to_label(self, operator: Account, label: String) -> None:
    proto 2 0
    // smart_contracts/asset_labeling/contract.py:106
    // self.admin_or_operator_only(label)
    frame_dig -1
    callsub admin_or_operator_only
    // smart_contracts/asset_labeling/contract.py:107
    // ensure(label in self.labels, S("ERR:NOEXIST"))
    frame_dig -1
    box_len
    bury 1
    // smart_contracts/asset_labeling/contract.py:27
    // if not cond:
    bnz add_operator_to_label_after_if_else@10
    // smart_contracts/asset_labeling/contract.py:107
    // ensure(label in self.labels, S("ERR:NOEXIST"))
    bytec_0 // "ERR:NOEXIST"
    // smart_contracts/asset_labeling/contract.py:28
    // log(msg)
    log
    // smart_contracts/asset_labeling/contract.py:29
    // op.err()
    err

add_operator_to_label_after_if_else@10:
    // smart_contracts/asset_labeling/contract.py:108-109
    // # check if operator exists already
    // if operator in self.operators:
    frame_dig -2
    box_len
    bury 1
    bz add_operator_to_label_else_body@2
    // smart_contracts/asset_labeling/contract.py:112
    // self.get_operator_label_index(operator, label)
    frame_dig -2
    frame_dig -1
    callsub get_operator_label_index
    // smart_contracts/asset_labeling/contract.py:113
    // == UInt64(NOT_FOUND_VALUE),
    intc_3 // 4294967295
    // smart_contracts/asset_labeling/contract.py:112-113
    // self.get_operator_label_index(operator, label)
    // == UInt64(NOT_FOUND_VALUE),
    ==
    // smart_contracts/asset_labeling/contract.py:27
    // if not cond:
    bnz add_operator_to_label_after_if_else@6
    // smart_contracts/asset_labeling/contract.py:114
    // S("ERR:EXISTS"),
    bytec 4 // "ERR:EXISTS"
    // smart_contracts/asset_labeling/contract.py:28
    // log(msg)
    log
    // smart_contracts/asset_labeling/contract.py:29
    // op.err()
    err

add_operator_to_label_after_if_else@6:
    // smart_contracts/asset_labeling/contract.py:117-118
    // # add label to operator
    // existing = self.operators[operator].copy()
    frame_dig -2
    box_get
    assert // check self.operators entry exists
    // smart_contracts/asset_labeling/contract.py:119
    // existing.append(arc4.String(label))
    frame_dig -1
    len
    itob
    extract 6 2
    frame_dig -1
    concat
    intc_0 // 1
    callsub dynamic_array_concat_byte_length_head
    // smart_contracts/asset_labeling/contract.py:120
    // self.operators[operator] = existing.copy()
    frame_dig -2
    box_del
    pop
    frame_dig -2
    swap
    box_put

add_operator_to_label_after_if_else@3:
    // smart_contracts/asset_labeling/contract.py:125-126
    // # increment label operators
    // label_descriptor = self.labels[label].copy()
    frame_dig -1
    box_get
    assert // check self.labels entry exists
    // smart_contracts/asset_labeling/contract.py:128
    // label_descriptor.num_operators.native + UInt64(1)
    dup
    pushint 10 // 10
    extract_uint64
    intc_0 // 1
    +
    // smart_contracts/asset_labeling/contract.py:127-129
    // label_descriptor.num_operators = arc4.UInt64(
    //     label_descriptor.num_operators.native + UInt64(1)
    // )
    itob
    replace2 10
    // smart_contracts/asset_labeling/contract.py:130
    // self.labels[label] = label_descriptor.copy()
    frame_dig -1
    box_del
    pop
    frame_dig -1
    swap
    box_put
    retsub

add_operator_to_label_else_body@2:
    // smart_contracts/asset_labeling/contract.py:122-123
    // # new operator, create new box
    // self.operators[operator] = arc4.DynamicArray(arc4.String(label))
    frame_dig -1
    len
    itob
    extract 6 2
    frame_dig -1
    concat
    bytec 9 // 0x0002
    swap
    concat
    bytec 10 // 0x0001
    swap
    concat
    frame_dig -2
    box_del
    pop
    frame_dig -2
    swap
    box_put
    b add_operator_to_label_after_if_else@3


// smart_contracts.asset_labeling.contract.AssetLabeling.remove_operator_from_label(operator: bytes, label: bytes) -> void:
remove_operator_from_label:
    // smart_contracts/asset_labeling/contract.py:132-133
    // @abimethod()
    // def remove_operator_from_label(self, operator: Account, label: String) -> None:
    proto 2 0
    intc_1 // 0
    dupn 4
    bytec_2 // ""
    dupn 2
    // smart_contracts/asset_labeling/contract.py:134
    // self.admin_or_operator_only(label)
    frame_dig -1
    callsub admin_or_operator_only
    // smart_contracts/asset_labeling/contract.py:136
    // ensure(label in self.labels, S("ERR:NOEXIST"))
    frame_dig -1
    box_len
    bury 1
    // smart_contracts/asset_labeling/contract.py:27
    // if not cond:
    bnz remove_operator_from_label_after_if_else@28
    // smart_contracts/asset_labeling/contract.py:136
    // ensure(label in self.labels, S("ERR:NOEXIST"))
    bytec_0 // "ERR:NOEXIST"
    // smart_contracts/asset_labeling/contract.py:28
    // log(msg)
    log
    // smart_contracts/asset_labeling/contract.py:29
    // op.err()
    err

remove_operator_from_label_after_if_else@28:
    // smart_contracts/asset_labeling/contract.py:137
    // ensure(operator in self.operators, S("ERR:NOEXIST"))
    frame_dig -2
    box_len
    bury 1
    // smart_contracts/asset_labeling/contract.py:27
    // if not cond:
    bnz remove_operator_from_label_after_if_else@32
    // smart_contracts/asset_labeling/contract.py:137
    // ensure(operator in self.operators, S("ERR:NOEXIST"))
    bytec_0 // "ERR:NOEXIST"
    // smart_contracts/asset_labeling/contract.py:28
    // log(msg)
    log
    // smart_contracts/asset_labeling/contract.py:29
    // op.err()
    err

remove_operator_from_label_after_if_else@32:
    // smart_contracts/asset_labeling/contract.py:139-140
    // # ensure label exists in operator
    // label_idx = self.get_operator_label_index(operator, label)
    frame_dig -2
    frame_dig -1
    callsub get_operator_label_index
    dup
    frame_bury 7
    // smart_contracts/asset_labeling/contract.py:142
    // label_idx != UInt64(NOT_FOUND_VALUE)
    intc_3 // 4294967295
    !=
    // smart_contracts/asset_labeling/contract.py:142-144
    // label_idx != UInt64(NOT_FOUND_VALUE)
    // and label_idx
    // != UInt64(NOT_FOUND_KEY),  # key check redundant, checked above
    bz remove_operator_from_label_bool_false@3
    // smart_contracts/asset_labeling/contract.py:143-144
    // and label_idx
    // != UInt64(NOT_FOUND_KEY),  # key check redundant, checked above
    frame_dig 7
    // smart_contracts/asset_labeling/contract.py:144
    // != UInt64(NOT_FOUND_KEY),  # key check redundant, checked above
    intc 4 // 4294967296
    // smart_contracts/asset_labeling/contract.py:143-144
    // and label_idx
    // != UInt64(NOT_FOUND_KEY),  # key check redundant, checked above
    !=
    // smart_contracts/asset_labeling/contract.py:142-144
    // label_idx != UInt64(NOT_FOUND_VALUE)
    // and label_idx
    // != UInt64(NOT_FOUND_KEY),  # key check redundant, checked above
    bz remove_operator_from_label_bool_false@3
    intc_0 // 1

remove_operator_from_label_bool_merge@4:
    // smart_contracts/asset_labeling/contract.py:27
    // if not cond:
    bnz remove_operator_from_label_after_if_else@24
    // smart_contracts/asset_labeling/contract.py:145
    // S("ERR:NOEXIST"),
    bytec_0 // "ERR:NOEXIST"
    // smart_contracts/asset_labeling/contract.py:28
    // log(msg)
    log
    // smart_contracts/asset_labeling/contract.py:29
    // op.err()
    err

remove_operator_from_label_after_if_else@24:
    // smart_contracts/asset_labeling/contract.py:148-149
    // # ensure only empty labels can be left operator-less
    // label_descriptor = self.labels[label].copy()
    frame_dig -1
    box_get
    swap
    dup
    cover 2
    frame_bury 0
    assert // check self.labels entry exists
    // smart_contracts/asset_labeling/contract.py:151
    // label_descriptor.num_operators > 1 or label_descriptor.num_assets == 0,
    extract 10 8 // on error: Index access is out of bounds
    pushbytes 0x0000000000000001
    b>
    bnz remove_operator_from_label_bool_true@6
    frame_dig 0
    extract 2 8 // on error: Index access is out of bounds
    bytec 7 // 0x0000000000000000
    b==
    bz remove_operator_from_label_bool_false@7

remove_operator_from_label_bool_true@6:
    intc_0 // 1

remove_operator_from_label_bool_merge@8:
    // smart_contracts/asset_labeling/contract.py:27
    // if not cond:
    bnz remove_operator_from_label_after_if_else@20
    // smart_contracts/asset_labeling/contract.py:152
    // S("ERR:NOEMPTY"),
    bytec 8 // "ERR:NOEMPTY"
    // smart_contracts/asset_labeling/contract.py:28
    // log(msg)
    log
    // smart_contracts/asset_labeling/contract.py:29
    // op.err()
    err

remove_operator_from_label_after_if_else@20:
    // smart_contracts/asset_labeling/contract.py:156
    // label_descriptor.num_operators.native - UInt64(1)
    frame_dig 0
    dup
    pushint 10 // 10
    extract_uint64
    intc_0 // 1
    -
    // smart_contracts/asset_labeling/contract.py:154-157
    // # decr operator count
    // label_descriptor.num_operators = arc4.UInt64(
    //     label_descriptor.num_operators.native - UInt64(1)
    // )
    itob
    replace2 10
    // smart_contracts/asset_labeling/contract.py:158
    // self.labels[label] = label_descriptor.copy()
    frame_dig -1
    box_del
    pop
    frame_dig -1
    swap
    box_put
    // smart_contracts/asset_labeling/contract.py:160
    // if self.operators[operator].length == 1:
    frame_dig -2
    box_get
    assert // check self.operators entry exists
    intc_1 // 0
    extract_uint16
    intc_0 // 1
    ==
    bz remove_operator_from_label_else_body@10
    // smart_contracts/asset_labeling/contract.py:161
    // del self.operators[operator]
    frame_dig -2
    box_del
    pop
    retsub

remove_operator_from_label_else_body@10:
    // smart_contracts/asset_labeling/contract.py:163
    // next_list = arc4.DynamicArray[arc4.String]()
    bytec 11 // 0x0000
    frame_bury 2
    // smart_contracts/asset_labeling/contract.py:164-167
    // # walk, push everything except index
    // # this implementation walks twice (once in get_operator_label_index)
    // # could be more efficient
    // for idx, stored_label in uenumerate(self.operators[operator]):
    frame_dig -2
    box_get
    swap
    dup
    cover 2
    frame_bury 1
    assert // check self.operators entry exists
    intc_1 // 0
    extract_uint16
    frame_bury 5
    intc_1 // 0
    frame_bury 6

remove_operator_from_label_for_header@11:
    // smart_contracts/asset_labeling/contract.py:164-167
    // # walk, push everything except index
    // # this implementation walks twice (once in get_operator_label_index)
    // # could be more efficient
    // for idx, stored_label in uenumerate(self.operators[operator]):
    frame_dig 6
    frame_dig 5
    <
    bz remove_operator_from_label_after_for@16
    frame_dig 1
    extract 2 0
    frame_dig 6
    dup
    cover 2
    intc_2 // 2
    *
    dig 1
    swap
    extract_uint16
    dup2
    extract_uint16
    intc_2 // 2
    +
    extract3
    frame_bury 4
    // smart_contracts/asset_labeling/contract.py:168
    // if label_idx != idx:
    frame_dig 7
    !=
    frame_dig 2
    frame_bury 3
    bz remove_operator_from_label_after_if_else@14
    // smart_contracts/asset_labeling/contract.py:169
    // next_list.append(stored_label)
    frame_dig 2
    frame_dig 4
    intc_0 // 1
    callsub dynamic_array_concat_byte_length_head
    frame_bury 3

remove_operator_from_label_after_if_else@14:
    frame_dig 3
    frame_bury 2
    frame_dig 6
    intc_0 // 1
    +
    frame_bury 6
    b remove_operator_from_label_for_header@11

remove_operator_from_label_after_for@16:
    // smart_contracts/asset_labeling/contract.py:171
    // self.operators[operator] = next_list.copy()
    frame_dig -2
    box_del
    pop
    frame_dig -2
    frame_dig 2
    box_put
    retsub

remove_operator_from_label_bool_false@7:
    intc_1 // 0
    b remove_operator_from_label_bool_merge@8

remove_operator_from_label_bool_false@3:
    intc_1 // 0
    b remove_operator_from_label_bool_merge@4


// smart_contracts.asset_labeling.contract.AssetLabeling.get_operator_labels(operator: bytes) -> bytes:
get_operator_labels:
    // smart_contracts/asset_labeling/contract.py:173-174
    // @abimethod(readonly=True)
    // def get_operator_labels(self, operator: Account) -> LabelList:
    proto 1 1
    // smart_contracts/asset_labeling/contract.py:175
    // ensure(operator in self.operators, S("ERR:NOEXIST"))
    frame_dig -1
    box_len
    bury 1
    // smart_contracts/asset_labeling/contract.py:27
    // if not cond:
    bnz get_operator_labels_after_if_else@3
    // smart_contracts/asset_labeling/contract.py:175
    // ensure(operator in self.operators, S("ERR:NOEXIST"))
    bytec_0 // "ERR:NOEXIST"
    // smart_contracts/asset_labeling/contract.py:28
    // log(msg)
    log
    // smart_contracts/asset_labeling/contract.py:29
    // op.err()
    err

get_operator_labels_after_if_else@3:
    // smart_contracts/asset_labeling/contract.py:176
    // return self.operators[operator]
    frame_dig -1
    box_get
    assert // check self.operators entry exists
    retsub


// smart_contracts.asset_labeling.contract.AssetLabeling.add_label_to_asset(label: bytes, asset: uint64) -> void:
add_label_to_asset:
    // smart_contracts/asset_labeling/contract.py:187-188
    // @abimethod()
    // def add_label_to_asset(self, label: String, asset: Asset) -> None:
    proto 2 0
    intc_1 // 0
    dup
    bytec_2 // ""
    dup
    // smart_contracts/asset_labeling/contract.py:189
    // ensure(label in self.labels, S("ERR:NOEXIST"))
    frame_dig -2
    box_len
    bury 1
    // smart_contracts/asset_labeling/contract.py:27
    // if not cond:
    bnz add_label_to_asset_after_if_else@19
    // smart_contracts/asset_labeling/contract.py:189
    // ensure(label in self.labels, S("ERR:NOEXIST"))
    bytec_0 // "ERR:NOEXIST"
    // smart_contracts/asset_labeling/contract.py:28
    // log(msg)
    log
    // smart_contracts/asset_labeling/contract.py:29
    // op.err()
    err

add_label_to_asset_after_if_else@19:
    // smart_contracts/asset_labeling/contract.py:191
    // self.operator_only(label)
    frame_dig -2
    callsub operator_only
    // smart_contracts/asset_labeling/contract.py:193
    // if asset in self.assets:
    frame_dig -1
    itob
    dup
    frame_bury 1
    box_len
    bury 1
    bz add_label_to_asset_else_body@2
    // smart_contracts/asset_labeling/contract.py:180
    // if asset not in self.assets:
    frame_dig 1
    box_len
    bury 1
    bnz add_label_to_asset_after_if_else@6
    // smart_contracts/asset_labeling/contract.py:181
    // return UInt64(NOT_FOUND_KEY)
    intc 4 // 4294967296

add_label_to_asset_after_inlined_smart_contracts.asset_labeling.contract.AssetLabeling.get_asset_label_index@12:
    // smart_contracts/asset_labeling/contract.py:196
    // self.get_asset_label_index(asset, label) == UInt64(NOT_FOUND_VALUE),
    intc_3 // 4294967295
    ==
    // smart_contracts/asset_labeling/contract.py:27
    // if not cond:
    bnz add_label_to_asset_after_if_else@15
    // smart_contracts/asset_labeling/contract.py:197
    // S("ERR:EXISTS"),
    bytec 4 // "ERR:EXISTS"
    // smart_contracts/asset_labeling/contract.py:28
    // log(msg)
    log
    // smart_contracts/asset_labeling/contract.py:29
    // op.err()
    err

add_label_to_asset_after_if_else@15:
    // smart_contracts/asset_labeling/contract.py:200-201
    // # add label to operator
    // existing = self.assets[asset].copy()
    frame_dig 1
    dup
    box_get
    assert // check self.assets entry exists
    // smart_contracts/asset_labeling/contract.py:202
    // existing.append(arc4.String(label))
    frame_dig -2
    len
    itob
    extract 6 2
    frame_dig -2
    concat
    intc_0 // 1
    callsub dynamic_array_concat_byte_length_head
    // smart_contracts/asset_labeling/contract.py:203
    // self.assets[asset] = existing.copy()
    dig 1
    box_del
    pop
    box_put

add_label_to_asset_after_if_else@3:
    // smart_contracts/asset_labeling/contract.py:208-209
    // # incr asset count
    // label_descriptor = self.labels[label].copy()
    frame_dig -2
    box_get
    assert // check self.labels entry exists
    // smart_contracts/asset_labeling/contract.py:211
    // label_descriptor.num_assets.native + UInt64(1)
    dup
    intc_2 // 2
    extract_uint64
    intc_0 // 1
    +
    // smart_contracts/asset_labeling/contract.py:210-212
    // label_descriptor.num_assets = arc4.UInt64(
    //     label_descriptor.num_assets.native + UInt64(1)
    // )
    itob
    replace2 2
    // smart_contracts/asset_labeling/contract.py:213
    // self.labels[label] = label_descriptor.copy()
    frame_dig -2
    box_del
    pop
    frame_dig -2
    swap
    box_put
    retsub

add_label_to_asset_after_if_else@6:
    // smart_contracts/asset_labeling/contract.py:182
    // for idx, stored_label in uenumerate(self.assets[asset]):
    frame_dig 1
    box_get
    swap
    dup
    cover 2
    frame_bury 0
    assert // check self.assets entry exists
    intc_1 // 0
    extract_uint16
    frame_bury 2
    intc_1 // 0
    frame_bury 3

add_label_to_asset_for_header@7:
    // smart_contracts/asset_labeling/contract.py:182
    // for idx, stored_label in uenumerate(self.assets[asset]):
    frame_dig 3
    frame_dig 2
    <
    bz add_label_to_asset_after_for@11
    frame_dig 0
    extract 2 0
    frame_dig 3
    intc_2 // 2
    *
    dig 1
    swap
    extract_uint16
    dup2
    extract_uint16
    intc_2 // 2
    +
    extract3
    // smart_contracts/asset_labeling/contract.py:183
    // if stored_label == label:
    extract 2 0
    frame_dig -2
    ==
    bz add_label_to_asset_after_if_else@10
    frame_dig 3
    // smart_contracts/asset_labeling/contract.py:196
    // self.get_asset_label_index(asset, label) == UInt64(NOT_FOUND_VALUE),
    b add_label_to_asset_after_inlined_smart_contracts.asset_labeling.contract.AssetLabeling.get_asset_label_index@12

add_label_to_asset_after_if_else@10:
    frame_dig 3
    intc_0 // 1
    +
    frame_bury 3
    b add_label_to_asset_for_header@7

add_label_to_asset_after_for@11:
    // smart_contracts/asset_labeling/contract.py:185
    // return UInt64(NOT_FOUND_VALUE)
    intc_3 // 4294967295
    // smart_contracts/asset_labeling/contract.py:196
    // self.get_asset_label_index(asset, label) == UInt64(NOT_FOUND_VALUE),
    b add_label_to_asset_after_inlined_smart_contracts.asset_labeling.contract.AssetLabeling.get_asset_label_index@12

add_label_to_asset_else_body@2:
    // smart_contracts/asset_labeling/contract.py:205-206
    // # new operator, create new box
    // self.assets[asset] = arc4.DynamicArray(arc4.String(label))
    frame_dig -2
    len
    itob
    extract 6 2
    frame_dig -2
    concat
    bytec 9 // 0x0002
    swap
    concat
    bytec 10 // 0x0001
    swap
    concat
    frame_dig 1
    dup
    box_del
    pop
    swap
    box_put
    b add_label_to_asset_after_if_else@3


// smart_contracts.asset_labeling.contract.AssetLabeling.remove_label_from_asset(label: bytes, asset: uint64) -> void:
remove_label_from_asset:
    // smart_contracts/asset_labeling/contract.py:215-216
    // @abimethod()
    // def remove_label_from_asset(self, label: String, asset: Asset) -> None:
    proto 2 0
    intc_1 // 0
    dupn 3
    bytec_2 // ""
    dupn 2
    // smart_contracts/asset_labeling/contract.py:217
    // ensure(label in self.labels, S("ERR:NOEXIST"))
    frame_dig -2
    box_len
    bury 1
    // smart_contracts/asset_labeling/contract.py:27
    // if not cond:
    bnz remove_label_from_asset_after_if_else@20
    // smart_contracts/asset_labeling/contract.py:217
    // ensure(label in self.labels, S("ERR:NOEXIST"))
    bytec_0 // "ERR:NOEXIST"
    // smart_contracts/asset_labeling/contract.py:28
    // log(msg)
    log
    // smart_contracts/asset_labeling/contract.py:29
    // op.err()
    err

remove_label_from_asset_after_if_else@20:
    // smart_contracts/asset_labeling/contract.py:219
    // self.operator_only(label)
    frame_dig -2
    callsub operator_only
    // smart_contracts/asset_labeling/contract.py:221
    // found = False
    intc_1 // 0
    frame_bury 5
    // smart_contracts/asset_labeling/contract.py:222
    // if self.assets[asset].length == 1:
    frame_dig -1
    itob
    dup
    frame_bury 3
    box_get
    assert // check self.assets entry exists
    intc_1 // 0
    extract_uint16
    intc_0 // 1
    ==
    bz remove_label_from_asset_else_body@5
    // smart_contracts/asset_labeling/contract.py:223
    // if self.assets[asset][0] == label:
    frame_dig 3
    box_get
    assert // check self.assets entry exists
    dup
    extract 2 0
    swap
    intc_1 // 0
    extract_uint16
    assert // Index access is out of bounds
    dup
    intc_1 // 0
    extract_uint16
    dup2
    extract_uint16
    intc_2 // 2
    +
    extract3
    extract 2 0
    frame_dig -2
    ==
    bz remove_label_from_asset_else_body@3
    // smart_contracts/asset_labeling/contract.py:224
    // del self.assets[asset]
    frame_dig 3
    box_del
    pop
    // smart_contracts/asset_labeling/contract.py:225
    // found = True
    intc_0 // 1
    frame_bury 5

remove_label_from_asset_after_if_else@13:
    // smart_contracts/asset_labeling/contract.py:27
    // if not cond:
    frame_dig 5
    bnz remove_label_from_asset_after_if_else@16
    // smart_contracts/asset_labeling/contract.py:240
    // ensure(found, S("ERR:NOEXIST"))
    bytec_0 // "ERR:NOEXIST"
    // smart_contracts/asset_labeling/contract.py:28
    // log(msg)
    log
    // smart_contracts/asset_labeling/contract.py:29
    // op.err()
    err

remove_label_from_asset_after_if_else@16:
    // smart_contracts/asset_labeling/contract.py:242-243
    // # decr asset count
    // label_descriptor = self.labels[label].copy()
    frame_dig -2
    box_get
    assert // check self.labels entry exists
    // smart_contracts/asset_labeling/contract.py:245
    // label_descriptor.num_assets.native - UInt64(1)
    dup
    intc_2 // 2
    extract_uint64
    intc_0 // 1
    -
    // smart_contracts/asset_labeling/contract.py:244-246
    // label_descriptor.num_assets = arc4.UInt64(
    //     label_descriptor.num_assets.native - UInt64(1)
    // )
    itob
    replace2 2
    // smart_contracts/asset_labeling/contract.py:247
    // self.labels[label] = label_descriptor.copy()
    frame_dig -2
    box_del
    pop
    frame_dig -2
    swap
    box_put
    retsub

remove_label_from_asset_else_body@3:
    // smart_contracts/asset_labeling/contract.py:227
    // found = False
    intc_1 // 0
    frame_bury 5
    b remove_label_from_asset_after_if_else@13

remove_label_from_asset_else_body@5:
    // smart_contracts/asset_labeling/contract.py:229
    // next_list = arc4.DynamicArray[arc4.String]()
    bytec 11 // 0x0000
    frame_bury 1
    // smart_contracts/asset_labeling/contract.py:230-232
    // # walk, push everything to new box except label
    // # save $found to throw if not found
    // for idx, stored_label in uenumerate(self.assets[asset]):
    frame_dig 3
    box_get
    swap
    dup
    cover 2
    frame_bury 0
    assert // check self.assets entry exists
    intc_1 // 0
    extract_uint16
    frame_bury 4
    intc_1 // 0
    frame_bury 6

remove_label_from_asset_for_header@6:
    // smart_contracts/asset_labeling/contract.py:230-232
    // # walk, push everything to new box except label
    // # save $found to throw if not found
    // for idx, stored_label in uenumerate(self.assets[asset]):
    frame_dig 6
    frame_dig 4
    <
    bz remove_label_from_asset_after_for@12
    frame_dig 0
    extract 2 0
    frame_dig 6
    intc_2 // 2
    *
    dig 1
    swap
    extract_uint16
    dup2
    extract_uint16
    intc_2 // 2
    +
    extract3
    dup
    frame_bury 2
    // smart_contracts/asset_labeling/contract.py:233
    // if stored_label != label:
    extract 2 0
    frame_dig -2
    !=
    bz remove_label_from_asset_else_body@9
    // smart_contracts/asset_labeling/contract.py:234
    // next_list.append(stored_label)
    frame_dig 1
    frame_dig 2
    intc_0 // 1
    callsub dynamic_array_concat_byte_length_head
    frame_bury 1

remove_label_from_asset_after_if_else@10:
    frame_dig 6
    intc_0 // 1
    +
    frame_bury 6
    b remove_label_from_asset_for_header@6

remove_label_from_asset_else_body@9:
    // smart_contracts/asset_labeling/contract.py:236
    // found = True
    intc_0 // 1
    frame_bury 5
    b remove_label_from_asset_after_if_else@10

remove_label_from_asset_after_for@12:
    // smart_contracts/asset_labeling/contract.py:238
    // self.assets[asset] = next_list.copy()
    frame_dig 3
    dup
    box_del
    pop
    frame_dig 1
    box_put
    b remove_label_from_asset_after_if_else@13


// smart_contracts.asset_labeling.contract.AssetLabeling.get_asset_labels(asset: uint64) -> bytes:
get_asset_labels:
    // smart_contracts/asset_labeling/contract.py:249-250
    // @abimethod(readonly=True)
    // def get_asset_labels(self, asset: Asset) -> LabelList:
    proto 1 1
    // smart_contracts/asset_labeling/contract.py:251
    // ensure(asset in self.assets, S("ERR:NOEXIST"))
    frame_dig -1
    itob
    dup
    box_len
    bury 1
    // smart_contracts/asset_labeling/contract.py:27
    // if not cond:
    bnz get_asset_labels_after_if_else@3
    // smart_contracts/asset_labeling/contract.py:251
    // ensure(asset in self.assets, S("ERR:NOEXIST"))
    bytec_0 // "ERR:NOEXIST"
    // smart_contracts/asset_labeling/contract.py:28
    // log(msg)
    log
    // smart_contracts/asset_labeling/contract.py:29
    // op.err()
    err

get_asset_labels_after_if_else@3:
    // smart_contracts/asset_labeling/contract.py:252
    // return self.assets[asset]
    frame_dig 0
    box_get
    assert // check self.assets entry exists
    swap
    retsub

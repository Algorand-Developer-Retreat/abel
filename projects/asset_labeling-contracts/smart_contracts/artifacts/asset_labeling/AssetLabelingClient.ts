/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"AssetLabeling","structs":{"AssetFull":[{"name":"name","type":"string"},{"name":"unitName","type":"string"},{"name":"url","type":"string"},{"name":"total","type":"uint64"},{"name":"decimals","type":"uint8"},{"name":"manager","type":"address"},{"name":"freeze","type":"address"},{"name":"clawback","type":"address"},{"name":"reserve","type":"address"},{"name":"metadataHash","type":"byte[]"},{"name":"reserveBalance","type":"uint64"},{"name":"labels","type":"string[]"}],"AssetMicro":[{"name":"unitName","type":"string"},{"name":"decimals","type":"uint8"}],"AssetMicroLabels":[{"name":"unitName","type":"string"},{"name":"decimals","type":"uint8"},{"name":"labels","type":"string[]"}],"AssetSmall":[{"name":"name","type":"string"},{"name":"unitName","type":"string"},{"name":"decimals","type":"uint8"},{"name":"total","type":"uint64"},{"name":"hasFreeze","type":"bool"},{"name":"hasClawback","type":"bool"},{"name":"labels","type":"string[]"}],"AssetText":[{"name":"name","type":"string"},{"name":"unitName","type":"string"},{"name":"url","type":"string"},{"name":"labels","type":"string[]"}],"AssetTextLabels":[{"name":"name","type":"string"},{"name":"unitName","type":"string"},{"name":"url","type":"string"}],"LabelDescriptor":[{"name":"name","type":"string"},{"name":"numAssets","type":"uint64"},{"name":"numOperators","type":"uint64"}]},"methods":[{"name":"change_admin","args":[{"type":"account","name":"new_admin"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"add_label","args":[{"type":"string","name":"id"},{"type":"string","name":"name"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"remove_label","args":[{"type":"string","name":"id"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"get_label","args":[{"type":"string","name":"id"}],"returns":{"type":"(string,uint64,uint64)","struct":"LabelDescriptor"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"log_labels","args":[{"type":"string[]","name":"ids"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"add_operator_to_label","args":[{"type":"account","name":"operator"},{"type":"string","name":"label"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"remove_operator_from_label","args":[{"type":"account","name":"operator"},{"type":"string","name":"label"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"get_operator_labels","args":[{"type":"account","name":"operator"}],"returns":{"type":"string[]"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"add_label_to_asset","args":[{"type":"string","name":"label"},{"type":"asset","name":"asset"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"remove_label_from_asset","args":[{"type":"string","name":"label"},{"type":"asset","name":"asset"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"get_asset_labels","args":[{"type":"asset","name":"asset"}],"returns":{"type":"string[]"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"get_assets_labels","args":[{"type":"uint64[]","name":"assets"}],"returns":{"type":"string[][]"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"get_asset_micro","args":[{"type":"uint64","name":"asset"}],"returns":{"type":"(string,uint8)","struct":"AssetMicro"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"get_assets_micro","args":[{"type":"uint64[]","name":"assets"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"get_asset_micro_labels","args":[{"type":"uint64","name":"asset"}],"returns":{"type":"(string,uint8,string[])","struct":"AssetMicroLabels"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"get_assets_micro_labels","args":[{"type":"uint64[]","name":"assets"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"get_asset_text","args":[{"type":"uint64","name":"asset"}],"returns":{"type":"(string,string,string,string[])","struct":"AssetText"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"get_assets_text","args":[{"type":"uint64[]","name":"assets"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"get_asset_text_labels","args":[{"type":"uint64","name":"asset"}],"returns":{"type":"(string,string,string)","struct":"AssetTextLabels"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"get_assets_text_labels","args":[{"type":"uint64[]","name":"assets"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"get_asset_small","args":[{"type":"uint64","name":"asset"}],"returns":{"type":"(string,string,uint8,uint64,bool,bool,string[])","struct":"AssetSmall"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"get_assets_small","args":[{"type":"uint64[]","name":"assets"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"get_asset_full","args":[{"type":"uint64","name":"asset"}],"returns":{"type":"(string,string,string,uint64,uint8,address,address,address,address,byte[],uint64,string[])","struct":"AssetFull"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"get_assets_full","args":[{"type":"uint64[]","name":"assets"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":0,"bytes":1},"local":{"ints":0,"bytes":0}},"keys":{"global":{"admin":{"keyType":"AVMString","valueType":"AVMBytes","key":"YWRtaW4="}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"labels":{"keyType":"AVMString","valueType":"LabelDescriptor","prefix":""},"assets":{"keyType":"AVMUint64","valueType":"string[]","prefix":""},"operators":{"keyType":"AVMBytes","valueType":"string[]","prefix":""}}}},"bareActions":{"create":["NoOp"],"call":["DeleteApplication","UpdateApplication"]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[1181,1616,1635,2060],"errorMessage":"Index access is out of bounds"},{"pc":[290,305,325,340,360,375,395,410,430,445,465,480,500,519,541,565,589,611,635,659,674,696,714,738],"errorMessage":"OnCompletion is not NoOp"},{"pc":[3040],"errorMessage":"account opted into asset"},{"pc":[2344,2352,2428,2436,2548,2556,2564,2705,2713,2721,2819,2827,2835,2849,2855,2870,3024,3045,3055,3065,3075,3083,3102,3110,3118,3126,3131],"errorMessage":"asset exists"},{"pc":[791],"errorMessage":"can only call when creating"},{"pc":[293,308,328,343,363,378,398,413,433,448,468,483,503,522,544,568,592,614,638,662,677,699,717,741,774,782],"errorMessage":"can only call when not creating"},{"pc":[1057,1278],"errorMessage":"check self.admin exists"},{"pc":[1866,1916,2041,2052,2132,2230,2277,2459,2581,2894,3160],"errorMessage":"check self.assets entry exists"},{"pc":[1180,1216,1259,1491,1615,1889,2096],"errorMessage":"check self.labels entry exists"},{"pc":[1356,1465,1674,1699,1803],"errorMessage":"check self.operators entry exists"},{"pc":[2358,2442,2841,3089],"errorMessage":"overflow"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"},"byteCode":{"approval":"CiAGAQACCP////8PgICAgBAmCwQVH3x1C0VSUjpOT0VYSVNUAgAAAAVhZG1pbgpFUlI6RVhJU1RTAgACCkVSUjpVTkFVVEgIAAAAAAAAAAALRVJSOk5PRU1QVFkCAAExGEAABScEMQBnMRtBAoOCGASPDX2OBHwbMvYEF+aRrgQz0P/cBHJWFucE+sHPGwS0xQufBKLdIkcEo33qEQRo8Y76BMLtdD8Epn8DwgSq7gxhBLbDn2gEY1vjYgRwk7ENBOG7lfwEVUC4CgSKQS+TBG8XzdUEekzkuQQ2bFGvBNXTutMEA7qY2zYaAI4YAcIBqgGYAYIBcwFbAUMBLQEVAP0A5wDUAMAAsQCdAI4AegBrAFcASAA0ACUAEQACI0MxGRREMRhENhoBiAupIkMxGRREMRhENhoBF4gLkChMULAiQzEZFEQxGEQ2GgGICkoiQzEZFEQxGEQ2GgEXiAoxKExQsCJDMRkURDEYRDYaAYgJYSJDMRkURDEYRDYaAReICUgoTFCwIkMxGRREMRhENhoBiAjMIkMxGRREMRhENhoBF4gIsyhMULAiQzEZFEQxGEQ2GgGICAwiQzEZFEQxGEQ2GgEXiAfzKExQsCJDMRkURDEYRDYaAYgHcSJDMRkURDEYRDYaAReIB1goTFCwIkMxGRREMRhENhoBiAa+KExQsCJDMRkURDEYRDYaARfAMIgGkihMULAiQzEZFEQxGEQ2GgFXAgA2GgIXwDCIBaYiQzEZFEQxGEQ2GgFXAgA2GgIXwDCIBMciQzEZFEQxGEQ2GgEXwByIBKMoTFCwIkMxGRREMRhENhoBF8AcNhoCVwIAiAONIkMxGRREMRhENhoBF8AcNhoCVwIAiAL8IkMxGRREMRhENhoBiAIlIkMxGRREMRhENhoBVwIAiAIAKExQsCJDMRkURDEYRDYaAVcCAIgBwyJDMRkURDEYRDYaAVcCADYaAlcCAIgBWiJDMRkURDEYRDYaARfAHIgBPCJDMRmNBgAT/hz+HP4cAAsAA0L+GTEYRIgBDSJDMRhEiAEBIkMxGBREIkOKAwGL/SNZSYv/CEwkCyQISwEWVwYCTgKL/SRLAlKL/yQLr1CL/RWL/U8DTwJSUIv+UEwkC0kjTIsDiwIMQQAjiwRJFlcGAosBiwNJTgRPAl1JjAFLAVkkCAiMBCQIjANC/9WLAIsBUIwAiYoEAStJi/4kC4v8JAsjiwSLAwxBAByL/YsESU4CWYsCCBZXBgKLAUxQjAEkCIwEQv/ci/0VjAAjjASLBIsCDEEAHIv/iwRJTgJZiwAIFlcGAosBTFCMASQIjARC/9yL/Iv+CBZXBgKLAVCL/YsDiwBSUIv/FYv/iwJPAlJQjACJigEBi/8VFlcGAov/UImIAAWJiAABiTEAIycEZUQSQAAEJwewAImKAQCI/+onBIv/Z4mKAgCI/96L/r1FAUEABCcFsACL/hUkEkAADoAKRVJSOkxFTkdUSLAAi/8VFlcGAov/UIASABIAAAAAAAAAAAAAAAAAAAAATFCL/rxIi/5Mv4mKAQCI/42L/71FAUAAAymwAIv/vkRXAggnCKhAAAQnCbAAi/+8SImKAQGL/71FAUAAAymwAIv/vkSJigEAi/8jWSOLAYsADEEAIov/VwIAiwFJTgIkC0sBTFlKWSQIWFcCAL5EsCIIjAFC/9aJigEAMQAjJwRlRBJBAAGJi/+IAAGJigEAMQCL/4gAHEkhBRNBABGLACEEE0EACSJAAAQnB7AAiSNC//SKAgEjK0mL/r1FAUAABSEFjACJi/6+TElOAowARCNZjAEjjAKLAosBDEEAKYsAVwIAiwIkC0sBTFlKWSQIWFcCAIv/EkEABYsCjACJiwIiCIwCQv/PIQSMAImKAgCL/4j/Y4v/vUUBQAADKbAAi/69RQFBAEGL/ov/iP+EIQQSQAAEJwWwAIv+vkSL/xUWVwYCi/9QIoj9Uov+vEiL/ky/i/++REmBClsiCBZcCov/vEiL/0y/iYv/FRZXBgKL/1AnBkxQJwpMUIv+vEiL/ky/Qv/NigIAI0cEK0cCi/+I/uSL/71FAUAAAymwAIv+vUUBQAADKbAAi/6L/4j/AkmMByEEE0EAwosHIQUTQQC6IkAAAymwAIv/vkxJTgKMAERXCgiACAAAAAAAAAABpUAAC4sAVwIIJwioQQCJIkAABCcJsACLAEmBClsiCRZcCov/vEiL/0y/i/6+RCNZIhJBAAWL/rxIiSqMAov+vkxJTgKMAUQjWYwFI4wGiwaLBQxBADiLAVcCAIsGSU4CJAtLAUxZSlkkCFiMBIsHE4sCjANBAAqLAosEIoj8PowDiwOMAosGIgiMBkL/wIv+vEiL/osCv4kjQv90I0L/Q4oBAYv/vUUBQQAFi/++RIkqiYoCACNJK0mL/r1FAUAAAymwAIv+iP3ki/8WSYwBvUUBQQCIiwG9RQFAADkhBSEEEkAABCcFsACLAUm+RIv+FRZXBgKL/lAiiPvBSwG8SL+L/r5ESSRbIggWXAKL/rxIi/5Mv4mLAb5MSU4CjABEI1mMAiOMA4sDiwIMQQApiwBXAgCLAyQLSwFMWUpZJAhYVwIAi/4SQQAFiwNC/5CLAyIIjANC/88hBEL/gov+FRZXBgKL/lAnBkxQJwpMUIsBSbxITL9C/4iKAgAjRwMrRwKL/r1FAUAAAymwAIv+iP0bI4wFi/8WSYwDvkQjWSISQQBHiwO+RElXAgBMI1lESSNZSlkkCFhXAgCL/hJBACSLA7xIIowFiwVAAAMpsACL/r5ESSRbIgkWXAKL/rxIi/5Mv4kjjAVC/90qjAGLA75MSU4CjABEI1mMBCOMBosGiwQMQQA3iwBXAgCLBiQLSwFMWUpZJAhYSYwCVwIAi/4TQQATiwGLAiKI+pCMAYsGIgiMBkL/xyKMBUL/8YsDSbxIiwG/Qv9/igEBi/8WSb1FAUEABosAvkRMiSpMiYoBASMqi/8jWSOLA4sCDEEATov/VwIAiwMlC1sWSYwAvUUBQQAiiwC+RCcGTFCLAUkjWUxXAgAiTwOI+oyMAYsDIgiMA0L/wosBSSNZTFcCACKABAACAACI+m6MAUL/34sBjACJigEBi/9xA0SI+tmL/3EBRBZJkyUORFcHAYACAANMUExQiYoBAYv/iP/WiYoBAIv/I1kjiwGLAAxBABiL/1cCAIsBSU4CJQtbiP+1sCIIjAFC/+CJigEBi/9xA0SI+oWL/3EBRBZJkyUORFcHAYv/Fkm9RQFBAB+LAr5EiwBJFYEFCIACAAWLAVBMFlcGAlBMUExQjACJKkL/4YoBAYv/iP+yiYoBAIv/I1kjiwGLAAxBABiL/1cCAIsBSU4CJQtbiP+RsCIIjAFC/+CJigEBi/9xBESI+g2L/3EDRIj6BYv/cQVEiPn9i/8WSb1FAUEAQosDvkSLAEkVJQhJFlcGAoACAAhMUIsBSU4DFU8CCEkWVwYCTwJMUIsCSU4DFU8CCBZXBgJQTwNQTwJQTFBMUIwAiSpC/76KAQGL/4j/jYmKAQCL/yNZI4sBiwAMQQAYi/9XAgCLAUlOAiULW4j/bLAiCIwBQv/giYoBAYv/cQREiPlwi/9xA0SI+WiL/3EFRIj5YEsCFYEGCEkWVwYCgAIABkxQSwMVTwIIFlcGAlBPA1BPAlBMUImKAQGL/4j/uImKAQCL/yNZI4sBiwAMQQAYi/9XAgCLAUlOAiULW4j/l7AiCIwBQv/giYoBAYv/cQREiPj+i/9xA0SI+PaL/3EBRBZJkyUORFcHAYv/cQBEFov/cQlEMgMTgAEAI08CVIv/cQpEMgMTgAEAI08CVIv/Fkm9RQFBAEGLBr5EiwBJFYEQCEkWVwYCgAIAEExQiwFJTgMVTwIITIsCUIsDUIsEUIsFI1OBaUxUTBZXBgJQTwJQTFBMUIwAiSpC/7+KAQGL/4j/ZImKAQCL/yNZI4sBiwAMQQAYi/9XAgCLAUlOAiULW4j/Q7AiCIwBQv/giYoBASNHC4v/cQhMSU8CRIv/cABFAUEA7osMi/9wAESL/3EERIj4HIwBi/9xA0SI+BKMAov/cQVEiPgIjAOL/3EARBaMBov/cQFEFkmTJQ5EVwcBjAWL/3EHTIwJRIv/cQlMjApEi/9xCkyMC0SL/3EITIwIRIv/cQZESRUWVwYCTFCMABaMB4v/FkmMBL1FAUEAb4sEvkSLAUkVgZsBCEkWVwYCgAIAm0xQiwJJTgMVTwIISRZXBgJPAkxQiwNJTgMVTwIITIsGUIsFUIsJUIsKUIsLUIsIUEsBFlcGAlCLAElOAxVPAghMiwdQTBZXBgJQTwRQTwNQTwJQTFBMUIwAiSpC/5EjQv8VigEBi/+I/u6JigEAi/8jWSOLAYsADEEAGIv/VwIAiwFJTgIlC1uI/s2wIgiMAUL/4Ik=","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":6,"patch":1}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type AssetFull = {
  name: string,
  unitName: string,
  url: string,
  total: bigint,
  decimals: number,
  manager: string,
  freeze: string,
  clawback: string,
  reserve: string,
  metadataHash: Uint8Array,
  reserveBalance: bigint,
  labels: string[]
}


/**
 * Converts the ABI tuple representation of a AssetFull to the struct representation
 */
export function AssetFullFromTuple(abiTuple: [string, string, string, bigint, number, string, string, string, string, Uint8Array, bigint, string[]]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.AssetFull, APP_SPEC.structs) as AssetFull
}

export type AssetMicro = {
  unitName: string,
  decimals: number
}


/**
 * Converts the ABI tuple representation of a AssetMicro to the struct representation
 */
export function AssetMicroFromTuple(abiTuple: [string, number]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.AssetMicro, APP_SPEC.structs) as AssetMicro
}

export type AssetMicroLabels = {
  unitName: string,
  decimals: number,
  labels: string[]
}


/**
 * Converts the ABI tuple representation of a AssetMicroLabels to the struct representation
 */
export function AssetMicroLabelsFromTuple(abiTuple: [string, number, string[]]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.AssetMicroLabels, APP_SPEC.structs) as AssetMicroLabels
}

export type AssetSmall = {
  name: string,
  unitName: string,
  decimals: number,
  total: bigint,
  hasFreeze: boolean,
  hasClawback: boolean,
  labels: string[]
}


/**
 * Converts the ABI tuple representation of a AssetSmall to the struct representation
 */
export function AssetSmallFromTuple(abiTuple: [string, string, number, bigint, boolean, boolean, string[]]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.AssetSmall, APP_SPEC.structs) as AssetSmall
}

export type AssetText = {
  name: string,
  unitName: string,
  url: string,
  labels: string[]
}


/**
 * Converts the ABI tuple representation of a AssetText to the struct representation
 */
export function AssetTextFromTuple(abiTuple: [string, string, string, string[]]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.AssetText, APP_SPEC.structs) as AssetText
}

export type AssetTextLabels = {
  name: string,
  unitName: string,
  url: string
}


/**
 * Converts the ABI tuple representation of a AssetTextLabels to the struct representation
 */
export function AssetTextLabelsFromTuple(abiTuple: [string, string, string]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.AssetTextLabels, APP_SPEC.structs) as AssetTextLabels
}

export type LabelDescriptor = {
  name: string,
  numAssets: bigint,
  numOperators: bigint
}


/**
 * Converts the ABI tuple representation of a LabelDescriptor to the struct representation
 */
export function LabelDescriptorFromTuple(abiTuple: [string, bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.LabelDescriptor, APP_SPEC.structs) as LabelDescriptor
}

/**
 * The argument types for the AssetLabeling contract
 */
export type AssetLabelingArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'change_admin(account)void': {
      newAdmin: Uint8Array | string
    }
    'add_label(string,string)void': {
      id: string
      name: string
    }
    'remove_label(string)void': {
      id: string
    }
    'get_label(string)(string,uint64,uint64)': {
      id: string
    }
    'log_labels(string[])void': {
      ids: string[]
    }
    'add_operator_to_label(account,string)void': {
      operator: Uint8Array | string
      label: string
    }
    'remove_operator_from_label(account,string)void': {
      operator: Uint8Array | string
      label: string
    }
    'get_operator_labels(account)string[]': {
      operator: Uint8Array | string
    }
    'add_label_to_asset(string,asset)void': {
      label: string
      asset: bigint
    }
    'remove_label_from_asset(string,asset)void': {
      label: string
      asset: bigint
    }
    'get_asset_labels(asset)string[]': {
      asset: bigint
    }
    'get_assets_labels(uint64[])string[][]': {
      assets: bigint[] | number[]
    }
    'get_asset_micro(uint64)(string,uint8)': {
      asset: bigint | number
    }
    'get_assets_micro(uint64[])void': {
      assets: bigint[] | number[]
    }
    'get_asset_micro_labels(uint64)(string,uint8,string[])': {
      asset: bigint | number
    }
    'get_assets_micro_labels(uint64[])void': {
      assets: bigint[] | number[]
    }
    'get_asset_text(uint64)(string,string,string,string[])': {
      asset: bigint | number
    }
    'get_assets_text(uint64[])void': {
      assets: bigint[] | number[]
    }
    'get_asset_text_labels(uint64)(string,string,string)': {
      asset: bigint | number
    }
    'get_assets_text_labels(uint64[])void': {
      assets: bigint[] | number[]
    }
    'get_asset_small(uint64)(string,string,uint8,uint64,bool,bool,string[])': {
      asset: bigint | number
    }
    'get_assets_small(uint64[])void': {
      assets: bigint[] | number[]
    }
    'get_asset_full(uint64)(string,string,string,uint64,uint8,address,address,address,address,byte[],uint64,string[])': {
      asset: bigint | number
    }
    'get_assets_full(uint64[])void': {
      assets: bigint[] | number[]
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'change_admin(account)void': [newAdmin: Uint8Array | string]
    'add_label(string,string)void': [id: string, name: string]
    'remove_label(string)void': [id: string]
    'get_label(string)(string,uint64,uint64)': [id: string]
    'log_labels(string[])void': [ids: string[]]
    'add_operator_to_label(account,string)void': [operator: Uint8Array | string, label: string]
    'remove_operator_from_label(account,string)void': [operator: Uint8Array | string, label: string]
    'get_operator_labels(account)string[]': [operator: Uint8Array | string]
    'add_label_to_asset(string,asset)void': [label: string, asset: bigint]
    'remove_label_from_asset(string,asset)void': [label: string, asset: bigint]
    'get_asset_labels(asset)string[]': [asset: bigint]
    'get_assets_labels(uint64[])string[][]': [assets: bigint[] | number[]]
    'get_asset_micro(uint64)(string,uint8)': [asset: bigint | number]
    'get_assets_micro(uint64[])void': [assets: bigint[] | number[]]
    'get_asset_micro_labels(uint64)(string,uint8,string[])': [asset: bigint | number]
    'get_assets_micro_labels(uint64[])void': [assets: bigint[] | number[]]
    'get_asset_text(uint64)(string,string,string,string[])': [asset: bigint | number]
    'get_assets_text(uint64[])void': [assets: bigint[] | number[]]
    'get_asset_text_labels(uint64)(string,string,string)': [asset: bigint | number]
    'get_assets_text_labels(uint64[])void': [assets: bigint[] | number[]]
    'get_asset_small(uint64)(string,string,uint8,uint64,bool,bool,string[])': [asset: bigint | number]
    'get_assets_small(uint64[])void': [assets: bigint[] | number[]]
    'get_asset_full(uint64)(string,string,string,uint64,uint8,address,address,address,address,byte[],uint64,string[])': [asset: bigint | number]
    'get_assets_full(uint64[])void': [assets: bigint[] | number[]]
  }
}

/**
 * The return type for each method
 */
export type AssetLabelingReturns = {
  'change_admin(account)void': void
  'add_label(string,string)void': void
  'remove_label(string)void': void
  'get_label(string)(string,uint64,uint64)': LabelDescriptor
  'log_labels(string[])void': void
  'add_operator_to_label(account,string)void': void
  'remove_operator_from_label(account,string)void': void
  'get_operator_labels(account)string[]': string[]
  'add_label_to_asset(string,asset)void': void
  'remove_label_from_asset(string,asset)void': void
  'get_asset_labels(asset)string[]': string[]
  'get_assets_labels(uint64[])string[][]': string[][]
  'get_asset_micro(uint64)(string,uint8)': AssetMicro
  'get_assets_micro(uint64[])void': void
  'get_asset_micro_labels(uint64)(string,uint8,string[])': AssetMicroLabels
  'get_assets_micro_labels(uint64[])void': void
  'get_asset_text(uint64)(string,string,string,string[])': AssetText
  'get_assets_text(uint64[])void': void
  'get_asset_text_labels(uint64)(string,string,string)': AssetTextLabels
  'get_assets_text_labels(uint64[])void': void
  'get_asset_small(uint64)(string,string,uint8,uint64,bool,bool,string[])': AssetSmall
  'get_assets_small(uint64[])void': void
  'get_asset_full(uint64)(string,string,string,uint64,uint8,address,address,address,address,byte[],uint64,string[])': AssetFull
  'get_assets_full(uint64[])void': void
}

/**
 * Defines the types of available calls and state of the AssetLabeling smart contract.
 */
export type AssetLabelingTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'change_admin(account)void' | 'change_admin', {
      argsObj: AssetLabelingArgs['obj']['change_admin(account)void']
      argsTuple: AssetLabelingArgs['tuple']['change_admin(account)void']
      returns: AssetLabelingReturns['change_admin(account)void']
    }>
    & Record<'add_label(string,string)void' | 'add_label', {
      argsObj: AssetLabelingArgs['obj']['add_label(string,string)void']
      argsTuple: AssetLabelingArgs['tuple']['add_label(string,string)void']
      returns: AssetLabelingReturns['add_label(string,string)void']
    }>
    & Record<'remove_label(string)void' | 'remove_label', {
      argsObj: AssetLabelingArgs['obj']['remove_label(string)void']
      argsTuple: AssetLabelingArgs['tuple']['remove_label(string)void']
      returns: AssetLabelingReturns['remove_label(string)void']
    }>
    & Record<'get_label(string)(string,uint64,uint64)' | 'get_label', {
      argsObj: AssetLabelingArgs['obj']['get_label(string)(string,uint64,uint64)']
      argsTuple: AssetLabelingArgs['tuple']['get_label(string)(string,uint64,uint64)']
      returns: AssetLabelingReturns['get_label(string)(string,uint64,uint64)']
    }>
    & Record<'log_labels(string[])void' | 'log_labels', {
      argsObj: AssetLabelingArgs['obj']['log_labels(string[])void']
      argsTuple: AssetLabelingArgs['tuple']['log_labels(string[])void']
      returns: AssetLabelingReturns['log_labels(string[])void']
    }>
    & Record<'add_operator_to_label(account,string)void' | 'add_operator_to_label', {
      argsObj: AssetLabelingArgs['obj']['add_operator_to_label(account,string)void']
      argsTuple: AssetLabelingArgs['tuple']['add_operator_to_label(account,string)void']
      returns: AssetLabelingReturns['add_operator_to_label(account,string)void']
    }>
    & Record<'remove_operator_from_label(account,string)void' | 'remove_operator_from_label', {
      argsObj: AssetLabelingArgs['obj']['remove_operator_from_label(account,string)void']
      argsTuple: AssetLabelingArgs['tuple']['remove_operator_from_label(account,string)void']
      returns: AssetLabelingReturns['remove_operator_from_label(account,string)void']
    }>
    & Record<'get_operator_labels(account)string[]' | 'get_operator_labels', {
      argsObj: AssetLabelingArgs['obj']['get_operator_labels(account)string[]']
      argsTuple: AssetLabelingArgs['tuple']['get_operator_labels(account)string[]']
      returns: AssetLabelingReturns['get_operator_labels(account)string[]']
    }>
    & Record<'add_label_to_asset(string,asset)void' | 'add_label_to_asset', {
      argsObj: AssetLabelingArgs['obj']['add_label_to_asset(string,asset)void']
      argsTuple: AssetLabelingArgs['tuple']['add_label_to_asset(string,asset)void']
      returns: AssetLabelingReturns['add_label_to_asset(string,asset)void']
    }>
    & Record<'remove_label_from_asset(string,asset)void' | 'remove_label_from_asset', {
      argsObj: AssetLabelingArgs['obj']['remove_label_from_asset(string,asset)void']
      argsTuple: AssetLabelingArgs['tuple']['remove_label_from_asset(string,asset)void']
      returns: AssetLabelingReturns['remove_label_from_asset(string,asset)void']
    }>
    & Record<'get_asset_labels(asset)string[]' | 'get_asset_labels', {
      argsObj: AssetLabelingArgs['obj']['get_asset_labels(asset)string[]']
      argsTuple: AssetLabelingArgs['tuple']['get_asset_labels(asset)string[]']
      returns: AssetLabelingReturns['get_asset_labels(asset)string[]']
    }>
    & Record<'get_assets_labels(uint64[])string[][]' | 'get_assets_labels', {
      argsObj: AssetLabelingArgs['obj']['get_assets_labels(uint64[])string[][]']
      argsTuple: AssetLabelingArgs['tuple']['get_assets_labels(uint64[])string[][]']
      returns: AssetLabelingReturns['get_assets_labels(uint64[])string[][]']
    }>
    & Record<'get_asset_micro(uint64)(string,uint8)' | 'get_asset_micro', {
      argsObj: AssetLabelingArgs['obj']['get_asset_micro(uint64)(string,uint8)']
      argsTuple: AssetLabelingArgs['tuple']['get_asset_micro(uint64)(string,uint8)']
      returns: AssetLabelingReturns['get_asset_micro(uint64)(string,uint8)']
    }>
    & Record<'get_assets_micro(uint64[])void' | 'get_assets_micro', {
      argsObj: AssetLabelingArgs['obj']['get_assets_micro(uint64[])void']
      argsTuple: AssetLabelingArgs['tuple']['get_assets_micro(uint64[])void']
      returns: AssetLabelingReturns['get_assets_micro(uint64[])void']
    }>
    & Record<'get_asset_micro_labels(uint64)(string,uint8,string[])' | 'get_asset_micro_labels', {
      argsObj: AssetLabelingArgs['obj']['get_asset_micro_labels(uint64)(string,uint8,string[])']
      argsTuple: AssetLabelingArgs['tuple']['get_asset_micro_labels(uint64)(string,uint8,string[])']
      returns: AssetLabelingReturns['get_asset_micro_labels(uint64)(string,uint8,string[])']
    }>
    & Record<'get_assets_micro_labels(uint64[])void' | 'get_assets_micro_labels', {
      argsObj: AssetLabelingArgs['obj']['get_assets_micro_labels(uint64[])void']
      argsTuple: AssetLabelingArgs['tuple']['get_assets_micro_labels(uint64[])void']
      returns: AssetLabelingReturns['get_assets_micro_labels(uint64[])void']
    }>
    & Record<'get_asset_text(uint64)(string,string,string,string[])' | 'get_asset_text', {
      argsObj: AssetLabelingArgs['obj']['get_asset_text(uint64)(string,string,string,string[])']
      argsTuple: AssetLabelingArgs['tuple']['get_asset_text(uint64)(string,string,string,string[])']
      returns: AssetLabelingReturns['get_asset_text(uint64)(string,string,string,string[])']
    }>
    & Record<'get_assets_text(uint64[])void' | 'get_assets_text', {
      argsObj: AssetLabelingArgs['obj']['get_assets_text(uint64[])void']
      argsTuple: AssetLabelingArgs['tuple']['get_assets_text(uint64[])void']
      returns: AssetLabelingReturns['get_assets_text(uint64[])void']
    }>
    & Record<'get_asset_text_labels(uint64)(string,string,string)' | 'get_asset_text_labels', {
      argsObj: AssetLabelingArgs['obj']['get_asset_text_labels(uint64)(string,string,string)']
      argsTuple: AssetLabelingArgs['tuple']['get_asset_text_labels(uint64)(string,string,string)']
      returns: AssetLabelingReturns['get_asset_text_labels(uint64)(string,string,string)']
    }>
    & Record<'get_assets_text_labels(uint64[])void' | 'get_assets_text_labels', {
      argsObj: AssetLabelingArgs['obj']['get_assets_text_labels(uint64[])void']
      argsTuple: AssetLabelingArgs['tuple']['get_assets_text_labels(uint64[])void']
      returns: AssetLabelingReturns['get_assets_text_labels(uint64[])void']
    }>
    & Record<'get_asset_small(uint64)(string,string,uint8,uint64,bool,bool,string[])' | 'get_asset_small', {
      argsObj: AssetLabelingArgs['obj']['get_asset_small(uint64)(string,string,uint8,uint64,bool,bool,string[])']
      argsTuple: AssetLabelingArgs['tuple']['get_asset_small(uint64)(string,string,uint8,uint64,bool,bool,string[])']
      returns: AssetLabelingReturns['get_asset_small(uint64)(string,string,uint8,uint64,bool,bool,string[])']
    }>
    & Record<'get_assets_small(uint64[])void' | 'get_assets_small', {
      argsObj: AssetLabelingArgs['obj']['get_assets_small(uint64[])void']
      argsTuple: AssetLabelingArgs['tuple']['get_assets_small(uint64[])void']
      returns: AssetLabelingReturns['get_assets_small(uint64[])void']
    }>
    & Record<'get_asset_full(uint64)(string,string,string,uint64,uint8,address,address,address,address,byte[],uint64,string[])' | 'get_asset_full', {
      argsObj: AssetLabelingArgs['obj']['get_asset_full(uint64)(string,string,string,uint64,uint8,address,address,address,address,byte[],uint64,string[])']
      argsTuple: AssetLabelingArgs['tuple']['get_asset_full(uint64)(string,string,string,uint64,uint8,address,address,address,address,byte[],uint64,string[])']
      returns: AssetLabelingReturns['get_asset_full(uint64)(string,string,string,uint64,uint8,address,address,address,address,byte[],uint64,string[])']
    }>
    & Record<'get_assets_full(uint64[])void' | 'get_assets_full', {
      argsObj: AssetLabelingArgs['obj']['get_assets_full(uint64[])void']
      argsTuple: AssetLabelingArgs['tuple']['get_assets_full(uint64[])void']
      returns: AssetLabelingReturns['get_assets_full(uint64[])void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        admin: BinaryState
      }
      maps: {}
    }
    box: {
      keys: {}
      maps: {
        labels: Map<string, LabelDescriptor>
        assets: Map<bigint, string[]>
        operators: Map<Uint8Array | string, string[]>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type AssetLabelingSignatures = keyof AssetLabelingTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type AssetLabelingNonVoidMethodSignatures = keyof AssetLabelingTypes['methods'] extends infer T ? T extends keyof AssetLabelingTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the AssetLabeling smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends AssetLabelingSignatures> = AssetLabelingTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the AssetLabeling smart contract to the method's return type
 */
export type MethodReturn<TSignature extends AssetLabelingSignatures> = AssetLabelingTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = AssetLabelingTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = AssetLabelingTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type AssetLabelingCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines supported update method params for this smart contract
 */
export type AssetLabelingUpdateCallParams =
  | Expand<AppClientBareCallParams> & {method?: never}
/**
 * Defines supported delete method params for this smart contract
 */
export type AssetLabelingDeleteCallParams =
  | Expand<AppClientBareCallParams> & {method?: never}
/**
 * Defines arguments required for the deploy method.
 */
export type AssetLabelingDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: AssetLabelingCreateCallParams
  /**
   * Update transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  updateParams?: AssetLabelingUpdateCallParams
  /**
   * Delete transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  deleteParams?: AssetLabelingDeleteCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the AssetLabeling smart contract
 */
export abstract class AssetLabelingParamsFactory {
  /**
   * Constructs a no op call for the change_admin(account)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static changeAdmin(params: CallParams<AssetLabelingArgs['obj']['change_admin(account)void'] | AssetLabelingArgs['tuple']['change_admin(account)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'change_admin(account)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.newAdmin],
    }
  }
  /**
   * Constructs a no op call for the add_label(string,string)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static addLabel(params: CallParams<AssetLabelingArgs['obj']['add_label(string,string)void'] | AssetLabelingArgs['tuple']['add_label(string,string)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'add_label(string,string)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.id, params.args.name],
    }
  }
  /**
   * Constructs a no op call for the remove_label(string)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static removeLabel(params: CallParams<AssetLabelingArgs['obj']['remove_label(string)void'] | AssetLabelingArgs['tuple']['remove_label(string)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'remove_label(string)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.id],
    }
  }
  /**
   * Constructs a no op call for the get_label(string)(string,uint64,uint64) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getLabel(params: CallParams<AssetLabelingArgs['obj']['get_label(string)(string,uint64,uint64)'] | AssetLabelingArgs['tuple']['get_label(string)(string,uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_label(string)(string,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.id],
    }
  }
  /**
   * Constructs a no op call for the log_labels(string[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static logLabels(params: CallParams<AssetLabelingArgs['obj']['log_labels(string[])void'] | AssetLabelingArgs['tuple']['log_labels(string[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'log_labels(string[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.ids],
    }
  }
  /**
   * Constructs a no op call for the add_operator_to_label(account,string)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static addOperatorToLabel(params: CallParams<AssetLabelingArgs['obj']['add_operator_to_label(account,string)void'] | AssetLabelingArgs['tuple']['add_operator_to_label(account,string)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'add_operator_to_label(account,string)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.operator, params.args.label],
    }
  }
  /**
   * Constructs a no op call for the remove_operator_from_label(account,string)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static removeOperatorFromLabel(params: CallParams<AssetLabelingArgs['obj']['remove_operator_from_label(account,string)void'] | AssetLabelingArgs['tuple']['remove_operator_from_label(account,string)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'remove_operator_from_label(account,string)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.operator, params.args.label],
    }
  }
  /**
   * Constructs a no op call for the get_operator_labels(account)string[] ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getOperatorLabels(params: CallParams<AssetLabelingArgs['obj']['get_operator_labels(account)string[]'] | AssetLabelingArgs['tuple']['get_operator_labels(account)string[]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_operator_labels(account)string[]' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.operator],
    }
  }
  /**
   * Constructs a no op call for the add_label_to_asset(string,asset)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static addLabelToAsset(params: CallParams<AssetLabelingArgs['obj']['add_label_to_asset(string,asset)void'] | AssetLabelingArgs['tuple']['add_label_to_asset(string,asset)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'add_label_to_asset(string,asset)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.label, params.args.asset],
    }
  }
  /**
   * Constructs a no op call for the remove_label_from_asset(string,asset)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static removeLabelFromAsset(params: CallParams<AssetLabelingArgs['obj']['remove_label_from_asset(string,asset)void'] | AssetLabelingArgs['tuple']['remove_label_from_asset(string,asset)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'remove_label_from_asset(string,asset)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.label, params.args.asset],
    }
  }
  /**
   * Constructs a no op call for the get_asset_labels(asset)string[] ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getAssetLabels(params: CallParams<AssetLabelingArgs['obj']['get_asset_labels(asset)string[]'] | AssetLabelingArgs['tuple']['get_asset_labels(asset)string[]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_asset_labels(asset)string[]' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.asset],
    }
  }
  /**
   * Constructs a no op call for the get_assets_labels(uint64[])string[][] ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getAssetsLabels(params: CallParams<AssetLabelingArgs['obj']['get_assets_labels(uint64[])string[][]'] | AssetLabelingArgs['tuple']['get_assets_labels(uint64[])string[][]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_assets_labels(uint64[])string[][]' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.assets],
    }
  }
  /**
   * Constructs a no op call for the get_asset_micro(uint64)(string,uint8) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getAssetMicro(params: CallParams<AssetLabelingArgs['obj']['get_asset_micro(uint64)(string,uint8)'] | AssetLabelingArgs['tuple']['get_asset_micro(uint64)(string,uint8)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_asset_micro(uint64)(string,uint8)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.asset],
    }
  }
  /**
   * Constructs a no op call for the get_assets_micro(uint64[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getAssetsMicro(params: CallParams<AssetLabelingArgs['obj']['get_assets_micro(uint64[])void'] | AssetLabelingArgs['tuple']['get_assets_micro(uint64[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_assets_micro(uint64[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.assets],
    }
  }
  /**
   * Constructs a no op call for the get_asset_micro_labels(uint64)(string,uint8,string[]) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getAssetMicroLabels(params: CallParams<AssetLabelingArgs['obj']['get_asset_micro_labels(uint64)(string,uint8,string[])'] | AssetLabelingArgs['tuple']['get_asset_micro_labels(uint64)(string,uint8,string[])']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_asset_micro_labels(uint64)(string,uint8,string[])' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.asset],
    }
  }
  /**
   * Constructs a no op call for the get_assets_micro_labels(uint64[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getAssetsMicroLabels(params: CallParams<AssetLabelingArgs['obj']['get_assets_micro_labels(uint64[])void'] | AssetLabelingArgs['tuple']['get_assets_micro_labels(uint64[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_assets_micro_labels(uint64[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.assets],
    }
  }
  /**
   * Constructs a no op call for the get_asset_text(uint64)(string,string,string,string[]) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getAssetText(params: CallParams<AssetLabelingArgs['obj']['get_asset_text(uint64)(string,string,string,string[])'] | AssetLabelingArgs['tuple']['get_asset_text(uint64)(string,string,string,string[])']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_asset_text(uint64)(string,string,string,string[])' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.asset],
    }
  }
  /**
   * Constructs a no op call for the get_assets_text(uint64[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getAssetsText(params: CallParams<AssetLabelingArgs['obj']['get_assets_text(uint64[])void'] | AssetLabelingArgs['tuple']['get_assets_text(uint64[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_assets_text(uint64[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.assets],
    }
  }
  /**
   * Constructs a no op call for the get_asset_text_labels(uint64)(string,string,string) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getAssetTextLabels(params: CallParams<AssetLabelingArgs['obj']['get_asset_text_labels(uint64)(string,string,string)'] | AssetLabelingArgs['tuple']['get_asset_text_labels(uint64)(string,string,string)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_asset_text_labels(uint64)(string,string,string)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.asset],
    }
  }
  /**
   * Constructs a no op call for the get_assets_text_labels(uint64[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getAssetsTextLabels(params: CallParams<AssetLabelingArgs['obj']['get_assets_text_labels(uint64[])void'] | AssetLabelingArgs['tuple']['get_assets_text_labels(uint64[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_assets_text_labels(uint64[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.assets],
    }
  }
  /**
   * Constructs a no op call for the get_asset_small(uint64)(string,string,uint8,uint64,bool,bool,string[]) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getAssetSmall(params: CallParams<AssetLabelingArgs['obj']['get_asset_small(uint64)(string,string,uint8,uint64,bool,bool,string[])'] | AssetLabelingArgs['tuple']['get_asset_small(uint64)(string,string,uint8,uint64,bool,bool,string[])']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_asset_small(uint64)(string,string,uint8,uint64,bool,bool,string[])' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.asset],
    }
  }
  /**
   * Constructs a no op call for the get_assets_small(uint64[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getAssetsSmall(params: CallParams<AssetLabelingArgs['obj']['get_assets_small(uint64[])void'] | AssetLabelingArgs['tuple']['get_assets_small(uint64[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_assets_small(uint64[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.assets],
    }
  }
  /**
   * Constructs a no op call for the get_asset_full(uint64)(string,string,string,uint64,uint8,address,address,address,address,byte[],uint64,string[]) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getAssetFull(params: CallParams<AssetLabelingArgs['obj']['get_asset_full(uint64)(string,string,string,uint64,uint8,address,address,address,address,byte[],uint64,string[])'] | AssetLabelingArgs['tuple']['get_asset_full(uint64)(string,string,string,uint64,uint8,address,address,address,address,byte[],uint64,string[])']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_asset_full(uint64)(string,string,string,uint64,uint8,address,address,address,address,byte[],uint64,string[])' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.asset],
    }
  }
  /**
   * Constructs a no op call for the get_assets_full(uint64[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getAssetsFull(params: CallParams<AssetLabelingArgs['obj']['get_assets_full(uint64[])void'] | AssetLabelingArgs['tuple']['get_assets_full(uint64[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_assets_full(uint64[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.assets],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the AssetLabeling smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class AssetLabelingFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `AssetLabelingFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new AssetLabelingClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new AssetLabelingClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the AssetLabeling smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: AssetLabelingDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new AssetLabelingClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the AssetLabeling smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

    /**
     * Gets available deployUpdate methods
     */
    deployUpdate: {
      /**
       * Updates an existing instance of the AssetLabeling smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a deployUpdate call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams>) => {
        return this.appFactory.params.bare.deployUpdate(params)
      },
    },

    /**
     * Gets available deployDelete methods
     */
    deployDelete: {
      /**
       * Deletes an existing instance of the AssetLabeling smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a deployDelete call
       */
      bare: (params?: Expand<AppClientBareCallParams>) => {
        return this.appFactory.params.bare.deployDelete(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the AssetLabeling smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the AssetLabeling smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new AssetLabelingClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the AssetLabeling smart contract
 */
export class AssetLabelingClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `AssetLabelingClient`
   *
   * @param appClient An `AppClient` instance which has been created with the AssetLabeling app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `AssetLabelingClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends AssetLabelingNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `AssetLabelingClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<AssetLabelingClient> {
    return new AssetLabelingClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `AssetLabelingClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<AssetLabelingClient> {
    return new AssetLabelingClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the AssetLabeling smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The update result
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams>) => {
        return this.appClient.params.bare.update(params)
      },
    },

    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the AssetLabeling smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The delete result
       */
      bare: (params?: Expand<AppClientBareCallParams>) => {
        return this.appClient.params.bare.delete(params)
      },
    },

    /**
     * Makes a clear_state call to an existing instance of the AssetLabeling smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the AssetLabeling smart contract using the `change_admin(account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    changeAdmin: (params: CallParams<AssetLabelingArgs['obj']['change_admin(account)void'] | AssetLabelingArgs['tuple']['change_admin(account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AssetLabelingParamsFactory.changeAdmin(params))
    },

    /**
     * Makes a call to the AssetLabeling smart contract using the `add_label(string,string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    addLabel: (params: CallParams<AssetLabelingArgs['obj']['add_label(string,string)void'] | AssetLabelingArgs['tuple']['add_label(string,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AssetLabelingParamsFactory.addLabel(params))
    },

    /**
     * Makes a call to the AssetLabeling smart contract using the `remove_label(string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    removeLabel: (params: CallParams<AssetLabelingArgs['obj']['remove_label(string)void'] | AssetLabelingArgs['tuple']['remove_label(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AssetLabelingParamsFactory.removeLabel(params))
    },

    /**
     * Makes a call to the AssetLabeling smart contract using the `get_label(string)(string,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getLabel: (params: CallParams<AssetLabelingArgs['obj']['get_label(string)(string,uint64,uint64)'] | AssetLabelingArgs['tuple']['get_label(string)(string,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AssetLabelingParamsFactory.getLabel(params))
    },

    /**
     * Makes a call to the AssetLabeling smart contract using the `log_labels(string[])void` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    logLabels: (params: CallParams<AssetLabelingArgs['obj']['log_labels(string[])void'] | AssetLabelingArgs['tuple']['log_labels(string[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AssetLabelingParamsFactory.logLabels(params))
    },

    /**
     * Makes a call to the AssetLabeling smart contract using the `add_operator_to_label(account,string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    addOperatorToLabel: (params: CallParams<AssetLabelingArgs['obj']['add_operator_to_label(account,string)void'] | AssetLabelingArgs['tuple']['add_operator_to_label(account,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AssetLabelingParamsFactory.addOperatorToLabel(params))
    },

    /**
     * Makes a call to the AssetLabeling smart contract using the `remove_operator_from_label(account,string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    removeOperatorFromLabel: (params: CallParams<AssetLabelingArgs['obj']['remove_operator_from_label(account,string)void'] | AssetLabelingArgs['tuple']['remove_operator_from_label(account,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AssetLabelingParamsFactory.removeOperatorFromLabel(params))
    },

    /**
     * Makes a call to the AssetLabeling smart contract using the `get_operator_labels(account)string[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getOperatorLabels: (params: CallParams<AssetLabelingArgs['obj']['get_operator_labels(account)string[]'] | AssetLabelingArgs['tuple']['get_operator_labels(account)string[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AssetLabelingParamsFactory.getOperatorLabels(params))
    },

    /**
     * Makes a call to the AssetLabeling smart contract using the `add_label_to_asset(string,asset)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    addLabelToAsset: (params: CallParams<AssetLabelingArgs['obj']['add_label_to_asset(string,asset)void'] | AssetLabelingArgs['tuple']['add_label_to_asset(string,asset)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AssetLabelingParamsFactory.addLabelToAsset(params))
    },

    /**
     * Makes a call to the AssetLabeling smart contract using the `remove_label_from_asset(string,asset)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    removeLabelFromAsset: (params: CallParams<AssetLabelingArgs['obj']['remove_label_from_asset(string,asset)void'] | AssetLabelingArgs['tuple']['remove_label_from_asset(string,asset)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AssetLabelingParamsFactory.removeLabelFromAsset(params))
    },

    /**
     * Makes a call to the AssetLabeling smart contract using the `get_asset_labels(asset)string[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getAssetLabels: (params: CallParams<AssetLabelingArgs['obj']['get_asset_labels(asset)string[]'] | AssetLabelingArgs['tuple']['get_asset_labels(asset)string[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AssetLabelingParamsFactory.getAssetLabels(params))
    },

    /**
     * Makes a call to the AssetLabeling smart contract using the `get_assets_labels(uint64[])string[][]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getAssetsLabels: (params: CallParams<AssetLabelingArgs['obj']['get_assets_labels(uint64[])string[][]'] | AssetLabelingArgs['tuple']['get_assets_labels(uint64[])string[][]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AssetLabelingParamsFactory.getAssetsLabels(params))
    },

    /**
     * Makes a call to the AssetLabeling smart contract using the `get_asset_micro(uint64)(string,uint8)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getAssetMicro: (params: CallParams<AssetLabelingArgs['obj']['get_asset_micro(uint64)(string,uint8)'] | AssetLabelingArgs['tuple']['get_asset_micro(uint64)(string,uint8)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AssetLabelingParamsFactory.getAssetMicro(params))
    },

    /**
     * Makes a call to the AssetLabeling smart contract using the `get_assets_micro(uint64[])void` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getAssetsMicro: (params: CallParams<AssetLabelingArgs['obj']['get_assets_micro(uint64[])void'] | AssetLabelingArgs['tuple']['get_assets_micro(uint64[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AssetLabelingParamsFactory.getAssetsMicro(params))
    },

    /**
     * Makes a call to the AssetLabeling smart contract using the `get_asset_micro_labels(uint64)(string,uint8,string[])` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getAssetMicroLabels: (params: CallParams<AssetLabelingArgs['obj']['get_asset_micro_labels(uint64)(string,uint8,string[])'] | AssetLabelingArgs['tuple']['get_asset_micro_labels(uint64)(string,uint8,string[])']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AssetLabelingParamsFactory.getAssetMicroLabels(params))
    },

    /**
     * Makes a call to the AssetLabeling smart contract using the `get_assets_micro_labels(uint64[])void` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getAssetsMicroLabels: (params: CallParams<AssetLabelingArgs['obj']['get_assets_micro_labels(uint64[])void'] | AssetLabelingArgs['tuple']['get_assets_micro_labels(uint64[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AssetLabelingParamsFactory.getAssetsMicroLabels(params))
    },

    /**
     * Makes a call to the AssetLabeling smart contract using the `get_asset_text(uint64)(string,string,string,string[])` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getAssetText: (params: CallParams<AssetLabelingArgs['obj']['get_asset_text(uint64)(string,string,string,string[])'] | AssetLabelingArgs['tuple']['get_asset_text(uint64)(string,string,string,string[])']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AssetLabelingParamsFactory.getAssetText(params))
    },

    /**
     * Makes a call to the AssetLabeling smart contract using the `get_assets_text(uint64[])void` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getAssetsText: (params: CallParams<AssetLabelingArgs['obj']['get_assets_text(uint64[])void'] | AssetLabelingArgs['tuple']['get_assets_text(uint64[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AssetLabelingParamsFactory.getAssetsText(params))
    },

    /**
     * Makes a call to the AssetLabeling smart contract using the `get_asset_text_labels(uint64)(string,string,string)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getAssetTextLabels: (params: CallParams<AssetLabelingArgs['obj']['get_asset_text_labels(uint64)(string,string,string)'] | AssetLabelingArgs['tuple']['get_asset_text_labels(uint64)(string,string,string)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AssetLabelingParamsFactory.getAssetTextLabels(params))
    },

    /**
     * Makes a call to the AssetLabeling smart contract using the `get_assets_text_labels(uint64[])void` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getAssetsTextLabels: (params: CallParams<AssetLabelingArgs['obj']['get_assets_text_labels(uint64[])void'] | AssetLabelingArgs['tuple']['get_assets_text_labels(uint64[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AssetLabelingParamsFactory.getAssetsTextLabels(params))
    },

    /**
     * Makes a call to the AssetLabeling smart contract using the `get_asset_small(uint64)(string,string,uint8,uint64,bool,bool,string[])` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getAssetSmall: (params: CallParams<AssetLabelingArgs['obj']['get_asset_small(uint64)(string,string,uint8,uint64,bool,bool,string[])'] | AssetLabelingArgs['tuple']['get_asset_small(uint64)(string,string,uint8,uint64,bool,bool,string[])']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AssetLabelingParamsFactory.getAssetSmall(params))
    },

    /**
     * Makes a call to the AssetLabeling smart contract using the `get_assets_small(uint64[])void` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getAssetsSmall: (params: CallParams<AssetLabelingArgs['obj']['get_assets_small(uint64[])void'] | AssetLabelingArgs['tuple']['get_assets_small(uint64[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AssetLabelingParamsFactory.getAssetsSmall(params))
    },

    /**
     * Makes a call to the AssetLabeling smart contract using the `get_asset_full(uint64)(string,string,string,uint64,uint8,address,address,address,address,byte[],uint64,string[])` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getAssetFull: (params: CallParams<AssetLabelingArgs['obj']['get_asset_full(uint64)(string,string,string,uint64,uint8,address,address,address,address,byte[],uint64,string[])'] | AssetLabelingArgs['tuple']['get_asset_full(uint64)(string,string,string,uint64,uint8,address,address,address,address,byte[],uint64,string[])']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AssetLabelingParamsFactory.getAssetFull(params))
    },

    /**
     * Makes a call to the AssetLabeling smart contract using the `get_assets_full(uint64[])void` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getAssetsFull: (params: CallParams<AssetLabelingArgs['obj']['get_assets_full(uint64[])void'] | AssetLabelingArgs['tuple']['get_assets_full(uint64[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AssetLabelingParamsFactory.getAssetsFull(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the AssetLabeling smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The update result
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams>) => {
        return this.appClient.createTransaction.bare.update(params)
      },
    },

    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the AssetLabeling smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The delete result
       */
      bare: (params?: Expand<AppClientBareCallParams>) => {
        return this.appClient.createTransaction.bare.delete(params)
      },
    },

    /**
     * Makes a clear_state call to an existing instance of the AssetLabeling smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the AssetLabeling smart contract using the `change_admin(account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    changeAdmin: (params: CallParams<AssetLabelingArgs['obj']['change_admin(account)void'] | AssetLabelingArgs['tuple']['change_admin(account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AssetLabelingParamsFactory.changeAdmin(params))
    },

    /**
     * Makes a call to the AssetLabeling smart contract using the `add_label(string,string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    addLabel: (params: CallParams<AssetLabelingArgs['obj']['add_label(string,string)void'] | AssetLabelingArgs['tuple']['add_label(string,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AssetLabelingParamsFactory.addLabel(params))
    },

    /**
     * Makes a call to the AssetLabeling smart contract using the `remove_label(string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    removeLabel: (params: CallParams<AssetLabelingArgs['obj']['remove_label(string)void'] | AssetLabelingArgs['tuple']['remove_label(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AssetLabelingParamsFactory.removeLabel(params))
    },

    /**
     * Makes a call to the AssetLabeling smart contract using the `get_label(string)(string,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getLabel: (params: CallParams<AssetLabelingArgs['obj']['get_label(string)(string,uint64,uint64)'] | AssetLabelingArgs['tuple']['get_label(string)(string,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AssetLabelingParamsFactory.getLabel(params))
    },

    /**
     * Makes a call to the AssetLabeling smart contract using the `log_labels(string[])void` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    logLabels: (params: CallParams<AssetLabelingArgs['obj']['log_labels(string[])void'] | AssetLabelingArgs['tuple']['log_labels(string[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AssetLabelingParamsFactory.logLabels(params))
    },

    /**
     * Makes a call to the AssetLabeling smart contract using the `add_operator_to_label(account,string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    addOperatorToLabel: (params: CallParams<AssetLabelingArgs['obj']['add_operator_to_label(account,string)void'] | AssetLabelingArgs['tuple']['add_operator_to_label(account,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AssetLabelingParamsFactory.addOperatorToLabel(params))
    },

    /**
     * Makes a call to the AssetLabeling smart contract using the `remove_operator_from_label(account,string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    removeOperatorFromLabel: (params: CallParams<AssetLabelingArgs['obj']['remove_operator_from_label(account,string)void'] | AssetLabelingArgs['tuple']['remove_operator_from_label(account,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AssetLabelingParamsFactory.removeOperatorFromLabel(params))
    },

    /**
     * Makes a call to the AssetLabeling smart contract using the `get_operator_labels(account)string[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getOperatorLabels: (params: CallParams<AssetLabelingArgs['obj']['get_operator_labels(account)string[]'] | AssetLabelingArgs['tuple']['get_operator_labels(account)string[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AssetLabelingParamsFactory.getOperatorLabels(params))
    },

    /**
     * Makes a call to the AssetLabeling smart contract using the `add_label_to_asset(string,asset)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    addLabelToAsset: (params: CallParams<AssetLabelingArgs['obj']['add_label_to_asset(string,asset)void'] | AssetLabelingArgs['tuple']['add_label_to_asset(string,asset)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AssetLabelingParamsFactory.addLabelToAsset(params))
    },

    /**
     * Makes a call to the AssetLabeling smart contract using the `remove_label_from_asset(string,asset)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    removeLabelFromAsset: (params: CallParams<AssetLabelingArgs['obj']['remove_label_from_asset(string,asset)void'] | AssetLabelingArgs['tuple']['remove_label_from_asset(string,asset)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AssetLabelingParamsFactory.removeLabelFromAsset(params))
    },

    /**
     * Makes a call to the AssetLabeling smart contract using the `get_asset_labels(asset)string[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getAssetLabels: (params: CallParams<AssetLabelingArgs['obj']['get_asset_labels(asset)string[]'] | AssetLabelingArgs['tuple']['get_asset_labels(asset)string[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AssetLabelingParamsFactory.getAssetLabels(params))
    },

    /**
     * Makes a call to the AssetLabeling smart contract using the `get_assets_labels(uint64[])string[][]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getAssetsLabels: (params: CallParams<AssetLabelingArgs['obj']['get_assets_labels(uint64[])string[][]'] | AssetLabelingArgs['tuple']['get_assets_labels(uint64[])string[][]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AssetLabelingParamsFactory.getAssetsLabels(params))
    },

    /**
     * Makes a call to the AssetLabeling smart contract using the `get_asset_micro(uint64)(string,uint8)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getAssetMicro: (params: CallParams<AssetLabelingArgs['obj']['get_asset_micro(uint64)(string,uint8)'] | AssetLabelingArgs['tuple']['get_asset_micro(uint64)(string,uint8)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AssetLabelingParamsFactory.getAssetMicro(params))
    },

    /**
     * Makes a call to the AssetLabeling smart contract using the `get_assets_micro(uint64[])void` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getAssetsMicro: (params: CallParams<AssetLabelingArgs['obj']['get_assets_micro(uint64[])void'] | AssetLabelingArgs['tuple']['get_assets_micro(uint64[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AssetLabelingParamsFactory.getAssetsMicro(params))
    },

    /**
     * Makes a call to the AssetLabeling smart contract using the `get_asset_micro_labels(uint64)(string,uint8,string[])` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getAssetMicroLabels: (params: CallParams<AssetLabelingArgs['obj']['get_asset_micro_labels(uint64)(string,uint8,string[])'] | AssetLabelingArgs['tuple']['get_asset_micro_labels(uint64)(string,uint8,string[])']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AssetLabelingParamsFactory.getAssetMicroLabels(params))
    },

    /**
     * Makes a call to the AssetLabeling smart contract using the `get_assets_micro_labels(uint64[])void` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getAssetsMicroLabels: (params: CallParams<AssetLabelingArgs['obj']['get_assets_micro_labels(uint64[])void'] | AssetLabelingArgs['tuple']['get_assets_micro_labels(uint64[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AssetLabelingParamsFactory.getAssetsMicroLabels(params))
    },

    /**
     * Makes a call to the AssetLabeling smart contract using the `get_asset_text(uint64)(string,string,string,string[])` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getAssetText: (params: CallParams<AssetLabelingArgs['obj']['get_asset_text(uint64)(string,string,string,string[])'] | AssetLabelingArgs['tuple']['get_asset_text(uint64)(string,string,string,string[])']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AssetLabelingParamsFactory.getAssetText(params))
    },

    /**
     * Makes a call to the AssetLabeling smart contract using the `get_assets_text(uint64[])void` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getAssetsText: (params: CallParams<AssetLabelingArgs['obj']['get_assets_text(uint64[])void'] | AssetLabelingArgs['tuple']['get_assets_text(uint64[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AssetLabelingParamsFactory.getAssetsText(params))
    },

    /**
     * Makes a call to the AssetLabeling smart contract using the `get_asset_text_labels(uint64)(string,string,string)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getAssetTextLabels: (params: CallParams<AssetLabelingArgs['obj']['get_asset_text_labels(uint64)(string,string,string)'] | AssetLabelingArgs['tuple']['get_asset_text_labels(uint64)(string,string,string)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AssetLabelingParamsFactory.getAssetTextLabels(params))
    },

    /**
     * Makes a call to the AssetLabeling smart contract using the `get_assets_text_labels(uint64[])void` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getAssetsTextLabels: (params: CallParams<AssetLabelingArgs['obj']['get_assets_text_labels(uint64[])void'] | AssetLabelingArgs['tuple']['get_assets_text_labels(uint64[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AssetLabelingParamsFactory.getAssetsTextLabels(params))
    },

    /**
     * Makes a call to the AssetLabeling smart contract using the `get_asset_small(uint64)(string,string,uint8,uint64,bool,bool,string[])` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getAssetSmall: (params: CallParams<AssetLabelingArgs['obj']['get_asset_small(uint64)(string,string,uint8,uint64,bool,bool,string[])'] | AssetLabelingArgs['tuple']['get_asset_small(uint64)(string,string,uint8,uint64,bool,bool,string[])']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AssetLabelingParamsFactory.getAssetSmall(params))
    },

    /**
     * Makes a call to the AssetLabeling smart contract using the `get_assets_small(uint64[])void` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getAssetsSmall: (params: CallParams<AssetLabelingArgs['obj']['get_assets_small(uint64[])void'] | AssetLabelingArgs['tuple']['get_assets_small(uint64[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AssetLabelingParamsFactory.getAssetsSmall(params))
    },

    /**
     * Makes a call to the AssetLabeling smart contract using the `get_asset_full(uint64)(string,string,string,uint64,uint8,address,address,address,address,byte[],uint64,string[])` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getAssetFull: (params: CallParams<AssetLabelingArgs['obj']['get_asset_full(uint64)(string,string,string,uint64,uint8,address,address,address,address,byte[],uint64,string[])'] | AssetLabelingArgs['tuple']['get_asset_full(uint64)(string,string,string,uint64,uint8,address,address,address,address,byte[],uint64,string[])']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AssetLabelingParamsFactory.getAssetFull(params))
    },

    /**
     * Makes a call to the AssetLabeling smart contract using the `get_assets_full(uint64[])void` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getAssetsFull: (params: CallParams<AssetLabelingArgs['obj']['get_assets_full(uint64[])void'] | AssetLabelingArgs['tuple']['get_assets_full(uint64[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AssetLabelingParamsFactory.getAssetsFull(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the AssetLabeling smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The update result
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & SendParams>) => {
        return this.appClient.send.bare.update(params)
      },
    },

    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the AssetLabeling smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The delete result
       */
      bare: (params?: Expand<AppClientBareCallParams & SendParams>) => {
        return this.appClient.send.bare.delete(params)
      },
    },

    /**
     * Makes a clear_state call to an existing instance of the AssetLabeling smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the AssetLabeling smart contract using the `change_admin(account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    changeAdmin: async (params: CallParams<AssetLabelingArgs['obj']['change_admin(account)void'] | AssetLabelingArgs['tuple']['change_admin(account)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AssetLabelingParamsFactory.changeAdmin(params))
      return {...result, return: result.return as unknown as (undefined | AssetLabelingReturns['change_admin(account)void'])}
    },

    /**
     * Makes a call to the AssetLabeling smart contract using the `add_label(string,string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    addLabel: async (params: CallParams<AssetLabelingArgs['obj']['add_label(string,string)void'] | AssetLabelingArgs['tuple']['add_label(string,string)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AssetLabelingParamsFactory.addLabel(params))
      return {...result, return: result.return as unknown as (undefined | AssetLabelingReturns['add_label(string,string)void'])}
    },

    /**
     * Makes a call to the AssetLabeling smart contract using the `remove_label(string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    removeLabel: async (params: CallParams<AssetLabelingArgs['obj']['remove_label(string)void'] | AssetLabelingArgs['tuple']['remove_label(string)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AssetLabelingParamsFactory.removeLabel(params))
      return {...result, return: result.return as unknown as (undefined | AssetLabelingReturns['remove_label(string)void'])}
    },

    /**
     * Makes a call to the AssetLabeling smart contract using the `get_label(string)(string,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getLabel: async (params: CallParams<AssetLabelingArgs['obj']['get_label(string)(string,uint64,uint64)'] | AssetLabelingArgs['tuple']['get_label(string)(string,uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AssetLabelingParamsFactory.getLabel(params))
      return {...result, return: result.return as unknown as (undefined | AssetLabelingReturns['get_label(string)(string,uint64,uint64)'])}
    },

    /**
     * Makes a call to the AssetLabeling smart contract using the `log_labels(string[])void` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    logLabels: async (params: CallParams<AssetLabelingArgs['obj']['log_labels(string[])void'] | AssetLabelingArgs['tuple']['log_labels(string[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AssetLabelingParamsFactory.logLabels(params))
      return {...result, return: result.return as unknown as (undefined | AssetLabelingReturns['log_labels(string[])void'])}
    },

    /**
     * Makes a call to the AssetLabeling smart contract using the `add_operator_to_label(account,string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    addOperatorToLabel: async (params: CallParams<AssetLabelingArgs['obj']['add_operator_to_label(account,string)void'] | AssetLabelingArgs['tuple']['add_operator_to_label(account,string)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AssetLabelingParamsFactory.addOperatorToLabel(params))
      return {...result, return: result.return as unknown as (undefined | AssetLabelingReturns['add_operator_to_label(account,string)void'])}
    },

    /**
     * Makes a call to the AssetLabeling smart contract using the `remove_operator_from_label(account,string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    removeOperatorFromLabel: async (params: CallParams<AssetLabelingArgs['obj']['remove_operator_from_label(account,string)void'] | AssetLabelingArgs['tuple']['remove_operator_from_label(account,string)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AssetLabelingParamsFactory.removeOperatorFromLabel(params))
      return {...result, return: result.return as unknown as (undefined | AssetLabelingReturns['remove_operator_from_label(account,string)void'])}
    },

    /**
     * Makes a call to the AssetLabeling smart contract using the `get_operator_labels(account)string[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getOperatorLabels: async (params: CallParams<AssetLabelingArgs['obj']['get_operator_labels(account)string[]'] | AssetLabelingArgs['tuple']['get_operator_labels(account)string[]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AssetLabelingParamsFactory.getOperatorLabels(params))
      return {...result, return: result.return as unknown as (undefined | AssetLabelingReturns['get_operator_labels(account)string[]'])}
    },

    /**
     * Makes a call to the AssetLabeling smart contract using the `add_label_to_asset(string,asset)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    addLabelToAsset: async (params: CallParams<AssetLabelingArgs['obj']['add_label_to_asset(string,asset)void'] | AssetLabelingArgs['tuple']['add_label_to_asset(string,asset)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AssetLabelingParamsFactory.addLabelToAsset(params))
      return {...result, return: result.return as unknown as (undefined | AssetLabelingReturns['add_label_to_asset(string,asset)void'])}
    },

    /**
     * Makes a call to the AssetLabeling smart contract using the `remove_label_from_asset(string,asset)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    removeLabelFromAsset: async (params: CallParams<AssetLabelingArgs['obj']['remove_label_from_asset(string,asset)void'] | AssetLabelingArgs['tuple']['remove_label_from_asset(string,asset)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AssetLabelingParamsFactory.removeLabelFromAsset(params))
      return {...result, return: result.return as unknown as (undefined | AssetLabelingReturns['remove_label_from_asset(string,asset)void'])}
    },

    /**
     * Makes a call to the AssetLabeling smart contract using the `get_asset_labels(asset)string[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getAssetLabels: async (params: CallParams<AssetLabelingArgs['obj']['get_asset_labels(asset)string[]'] | AssetLabelingArgs['tuple']['get_asset_labels(asset)string[]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AssetLabelingParamsFactory.getAssetLabels(params))
      return {...result, return: result.return as unknown as (undefined | AssetLabelingReturns['get_asset_labels(asset)string[]'])}
    },

    /**
     * Makes a call to the AssetLabeling smart contract using the `get_assets_labels(uint64[])string[][]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getAssetsLabels: async (params: CallParams<AssetLabelingArgs['obj']['get_assets_labels(uint64[])string[][]'] | AssetLabelingArgs['tuple']['get_assets_labels(uint64[])string[][]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AssetLabelingParamsFactory.getAssetsLabels(params))
      return {...result, return: result.return as unknown as (undefined | AssetLabelingReturns['get_assets_labels(uint64[])string[][]'])}
    },

    /**
     * Makes a call to the AssetLabeling smart contract using the `get_asset_micro(uint64)(string,uint8)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getAssetMicro: async (params: CallParams<AssetLabelingArgs['obj']['get_asset_micro(uint64)(string,uint8)'] | AssetLabelingArgs['tuple']['get_asset_micro(uint64)(string,uint8)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AssetLabelingParamsFactory.getAssetMicro(params))
      return {...result, return: result.return as unknown as (undefined | AssetLabelingReturns['get_asset_micro(uint64)(string,uint8)'])}
    },

    /**
     * Makes a call to the AssetLabeling smart contract using the `get_assets_micro(uint64[])void` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getAssetsMicro: async (params: CallParams<AssetLabelingArgs['obj']['get_assets_micro(uint64[])void'] | AssetLabelingArgs['tuple']['get_assets_micro(uint64[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AssetLabelingParamsFactory.getAssetsMicro(params))
      return {...result, return: result.return as unknown as (undefined | AssetLabelingReturns['get_assets_micro(uint64[])void'])}
    },

    /**
     * Makes a call to the AssetLabeling smart contract using the `get_asset_micro_labels(uint64)(string,uint8,string[])` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getAssetMicroLabels: async (params: CallParams<AssetLabelingArgs['obj']['get_asset_micro_labels(uint64)(string,uint8,string[])'] | AssetLabelingArgs['tuple']['get_asset_micro_labels(uint64)(string,uint8,string[])']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AssetLabelingParamsFactory.getAssetMicroLabels(params))
      return {...result, return: result.return as unknown as (undefined | AssetLabelingReturns['get_asset_micro_labels(uint64)(string,uint8,string[])'])}
    },

    /**
     * Makes a call to the AssetLabeling smart contract using the `get_assets_micro_labels(uint64[])void` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getAssetsMicroLabels: async (params: CallParams<AssetLabelingArgs['obj']['get_assets_micro_labels(uint64[])void'] | AssetLabelingArgs['tuple']['get_assets_micro_labels(uint64[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AssetLabelingParamsFactory.getAssetsMicroLabels(params))
      return {...result, return: result.return as unknown as (undefined | AssetLabelingReturns['get_assets_micro_labels(uint64[])void'])}
    },

    /**
     * Makes a call to the AssetLabeling smart contract using the `get_asset_text(uint64)(string,string,string,string[])` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getAssetText: async (params: CallParams<AssetLabelingArgs['obj']['get_asset_text(uint64)(string,string,string,string[])'] | AssetLabelingArgs['tuple']['get_asset_text(uint64)(string,string,string,string[])']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AssetLabelingParamsFactory.getAssetText(params))
      return {...result, return: result.return as unknown as (undefined | AssetLabelingReturns['get_asset_text(uint64)(string,string,string,string[])'])}
    },

    /**
     * Makes a call to the AssetLabeling smart contract using the `get_assets_text(uint64[])void` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getAssetsText: async (params: CallParams<AssetLabelingArgs['obj']['get_assets_text(uint64[])void'] | AssetLabelingArgs['tuple']['get_assets_text(uint64[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AssetLabelingParamsFactory.getAssetsText(params))
      return {...result, return: result.return as unknown as (undefined | AssetLabelingReturns['get_assets_text(uint64[])void'])}
    },

    /**
     * Makes a call to the AssetLabeling smart contract using the `get_asset_text_labels(uint64)(string,string,string)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getAssetTextLabels: async (params: CallParams<AssetLabelingArgs['obj']['get_asset_text_labels(uint64)(string,string,string)'] | AssetLabelingArgs['tuple']['get_asset_text_labels(uint64)(string,string,string)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AssetLabelingParamsFactory.getAssetTextLabels(params))
      return {...result, return: result.return as unknown as (undefined | AssetLabelingReturns['get_asset_text_labels(uint64)(string,string,string)'])}
    },

    /**
     * Makes a call to the AssetLabeling smart contract using the `get_assets_text_labels(uint64[])void` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getAssetsTextLabels: async (params: CallParams<AssetLabelingArgs['obj']['get_assets_text_labels(uint64[])void'] | AssetLabelingArgs['tuple']['get_assets_text_labels(uint64[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AssetLabelingParamsFactory.getAssetsTextLabels(params))
      return {...result, return: result.return as unknown as (undefined | AssetLabelingReturns['get_assets_text_labels(uint64[])void'])}
    },

    /**
     * Makes a call to the AssetLabeling smart contract using the `get_asset_small(uint64)(string,string,uint8,uint64,bool,bool,string[])` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getAssetSmall: async (params: CallParams<AssetLabelingArgs['obj']['get_asset_small(uint64)(string,string,uint8,uint64,bool,bool,string[])'] | AssetLabelingArgs['tuple']['get_asset_small(uint64)(string,string,uint8,uint64,bool,bool,string[])']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AssetLabelingParamsFactory.getAssetSmall(params))
      return {...result, return: result.return as unknown as (undefined | AssetLabelingReturns['get_asset_small(uint64)(string,string,uint8,uint64,bool,bool,string[])'])}
    },

    /**
     * Makes a call to the AssetLabeling smart contract using the `get_assets_small(uint64[])void` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getAssetsSmall: async (params: CallParams<AssetLabelingArgs['obj']['get_assets_small(uint64[])void'] | AssetLabelingArgs['tuple']['get_assets_small(uint64[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AssetLabelingParamsFactory.getAssetsSmall(params))
      return {...result, return: result.return as unknown as (undefined | AssetLabelingReturns['get_assets_small(uint64[])void'])}
    },

    /**
     * Makes a call to the AssetLabeling smart contract using the `get_asset_full(uint64)(string,string,string,uint64,uint8,address,address,address,address,byte[],uint64,string[])` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getAssetFull: async (params: CallParams<AssetLabelingArgs['obj']['get_asset_full(uint64)(string,string,string,uint64,uint8,address,address,address,address,byte[],uint64,string[])'] | AssetLabelingArgs['tuple']['get_asset_full(uint64)(string,string,string,uint64,uint8,address,address,address,address,byte[],uint64,string[])']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AssetLabelingParamsFactory.getAssetFull(params))
      return {...result, return: result.return as unknown as (undefined | AssetLabelingReturns['get_asset_full(uint64)(string,string,string,uint64,uint8,address,address,address,address,byte[],uint64,string[])'])}
    },

    /**
     * Makes a call to the AssetLabeling smart contract using the `get_assets_full(uint64[])void` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getAssetsFull: async (params: CallParams<AssetLabelingArgs['obj']['get_assets_full(uint64[])void'] | AssetLabelingArgs['tuple']['get_assets_full(uint64[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AssetLabelingParamsFactory.getAssetsFull(params))
      return {...result, return: result.return as unknown as (undefined | AssetLabelingReturns['get_assets_full(uint64[])void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new AssetLabelingClient(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the AssetLabeling smart contract using the `get_label(string)(string,uint64,uint64)` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getLabel(params: CallParams<AssetLabelingArgs['obj']['get_label(string)(string,uint64,uint64)'] | AssetLabelingArgs['tuple']['get_label(string)(string,uint64,uint64)']>) {
    const result = await this.appClient.send.call(AssetLabelingParamsFactory.getLabel(params))
    return result.return as unknown as AssetLabelingReturns['get_label(string)(string,uint64,uint64)']
  }

  /**
   * Makes a readonly (simulated) call to the AssetLabeling smart contract using the `log_labels(string[])void` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async logLabels(params: CallParams<AssetLabelingArgs['obj']['log_labels(string[])void'] | AssetLabelingArgs['tuple']['log_labels(string[])void']>) {
    const result = await this.appClient.send.call(AssetLabelingParamsFactory.logLabels(params))
    return result.return as unknown as AssetLabelingReturns['log_labels(string[])void']
  }

  /**
   * Makes a readonly (simulated) call to the AssetLabeling smart contract using the `get_operator_labels(account)string[]` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getOperatorLabels(params: CallParams<AssetLabelingArgs['obj']['get_operator_labels(account)string[]'] | AssetLabelingArgs['tuple']['get_operator_labels(account)string[]']>) {
    const result = await this.appClient.send.call(AssetLabelingParamsFactory.getOperatorLabels(params))
    return result.return as unknown as AssetLabelingReturns['get_operator_labels(account)string[]']
  }

  /**
   * Makes a readonly (simulated) call to the AssetLabeling smart contract using the `get_asset_labels(asset)string[]` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getAssetLabels(params: CallParams<AssetLabelingArgs['obj']['get_asset_labels(asset)string[]'] | AssetLabelingArgs['tuple']['get_asset_labels(asset)string[]']>) {
    const result = await this.appClient.send.call(AssetLabelingParamsFactory.getAssetLabels(params))
    return result.return as unknown as AssetLabelingReturns['get_asset_labels(asset)string[]']
  }

  /**
   * Makes a readonly (simulated) call to the AssetLabeling smart contract using the `get_assets_labels(uint64[])string[][]` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getAssetsLabels(params: CallParams<AssetLabelingArgs['obj']['get_assets_labels(uint64[])string[][]'] | AssetLabelingArgs['tuple']['get_assets_labels(uint64[])string[][]']>) {
    const result = await this.appClient.send.call(AssetLabelingParamsFactory.getAssetsLabels(params))
    return result.return as unknown as AssetLabelingReturns['get_assets_labels(uint64[])string[][]']
  }

  /**
   * Makes a readonly (simulated) call to the AssetLabeling smart contract using the `get_asset_micro(uint64)(string,uint8)` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getAssetMicro(params: CallParams<AssetLabelingArgs['obj']['get_asset_micro(uint64)(string,uint8)'] | AssetLabelingArgs['tuple']['get_asset_micro(uint64)(string,uint8)']>) {
    const result = await this.appClient.send.call(AssetLabelingParamsFactory.getAssetMicro(params))
    return result.return as unknown as AssetLabelingReturns['get_asset_micro(uint64)(string,uint8)']
  }

  /**
   * Makes a readonly (simulated) call to the AssetLabeling smart contract using the `get_assets_micro(uint64[])void` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getAssetsMicro(params: CallParams<AssetLabelingArgs['obj']['get_assets_micro(uint64[])void'] | AssetLabelingArgs['tuple']['get_assets_micro(uint64[])void']>) {
    const result = await this.appClient.send.call(AssetLabelingParamsFactory.getAssetsMicro(params))
    return result.return as unknown as AssetLabelingReturns['get_assets_micro(uint64[])void']
  }

  /**
   * Makes a readonly (simulated) call to the AssetLabeling smart contract using the `get_asset_micro_labels(uint64)(string,uint8,string[])` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getAssetMicroLabels(params: CallParams<AssetLabelingArgs['obj']['get_asset_micro_labels(uint64)(string,uint8,string[])'] | AssetLabelingArgs['tuple']['get_asset_micro_labels(uint64)(string,uint8,string[])']>) {
    const result = await this.appClient.send.call(AssetLabelingParamsFactory.getAssetMicroLabels(params))
    return result.return as unknown as AssetLabelingReturns['get_asset_micro_labels(uint64)(string,uint8,string[])']
  }

  /**
   * Makes a readonly (simulated) call to the AssetLabeling smart contract using the `get_assets_micro_labels(uint64[])void` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getAssetsMicroLabels(params: CallParams<AssetLabelingArgs['obj']['get_assets_micro_labels(uint64[])void'] | AssetLabelingArgs['tuple']['get_assets_micro_labels(uint64[])void']>) {
    const result = await this.appClient.send.call(AssetLabelingParamsFactory.getAssetsMicroLabels(params))
    return result.return as unknown as AssetLabelingReturns['get_assets_micro_labels(uint64[])void']
  }

  /**
   * Makes a readonly (simulated) call to the AssetLabeling smart contract using the `get_asset_text(uint64)(string,string,string,string[])` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getAssetText(params: CallParams<AssetLabelingArgs['obj']['get_asset_text(uint64)(string,string,string,string[])'] | AssetLabelingArgs['tuple']['get_asset_text(uint64)(string,string,string,string[])']>) {
    const result = await this.appClient.send.call(AssetLabelingParamsFactory.getAssetText(params))
    return result.return as unknown as AssetLabelingReturns['get_asset_text(uint64)(string,string,string,string[])']
  }

  /**
   * Makes a readonly (simulated) call to the AssetLabeling smart contract using the `get_assets_text(uint64[])void` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getAssetsText(params: CallParams<AssetLabelingArgs['obj']['get_assets_text(uint64[])void'] | AssetLabelingArgs['tuple']['get_assets_text(uint64[])void']>) {
    const result = await this.appClient.send.call(AssetLabelingParamsFactory.getAssetsText(params))
    return result.return as unknown as AssetLabelingReturns['get_assets_text(uint64[])void']
  }

  /**
   * Makes a readonly (simulated) call to the AssetLabeling smart contract using the `get_asset_text_labels(uint64)(string,string,string)` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getAssetTextLabels(params: CallParams<AssetLabelingArgs['obj']['get_asset_text_labels(uint64)(string,string,string)'] | AssetLabelingArgs['tuple']['get_asset_text_labels(uint64)(string,string,string)']>) {
    const result = await this.appClient.send.call(AssetLabelingParamsFactory.getAssetTextLabels(params))
    return result.return as unknown as AssetLabelingReturns['get_asset_text_labels(uint64)(string,string,string)']
  }

  /**
   * Makes a readonly (simulated) call to the AssetLabeling smart contract using the `get_assets_text_labels(uint64[])void` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getAssetsTextLabels(params: CallParams<AssetLabelingArgs['obj']['get_assets_text_labels(uint64[])void'] | AssetLabelingArgs['tuple']['get_assets_text_labels(uint64[])void']>) {
    const result = await this.appClient.send.call(AssetLabelingParamsFactory.getAssetsTextLabels(params))
    return result.return as unknown as AssetLabelingReturns['get_assets_text_labels(uint64[])void']
  }

  /**
   * Makes a readonly (simulated) call to the AssetLabeling smart contract using the `get_asset_small(uint64)(string,string,uint8,uint64,bool,bool,string[])` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getAssetSmall(params: CallParams<AssetLabelingArgs['obj']['get_asset_small(uint64)(string,string,uint8,uint64,bool,bool,string[])'] | AssetLabelingArgs['tuple']['get_asset_small(uint64)(string,string,uint8,uint64,bool,bool,string[])']>) {
    const result = await this.appClient.send.call(AssetLabelingParamsFactory.getAssetSmall(params))
    return result.return as unknown as AssetLabelingReturns['get_asset_small(uint64)(string,string,uint8,uint64,bool,bool,string[])']
  }

  /**
   * Makes a readonly (simulated) call to the AssetLabeling smart contract using the `get_assets_small(uint64[])void` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getAssetsSmall(params: CallParams<AssetLabelingArgs['obj']['get_assets_small(uint64[])void'] | AssetLabelingArgs['tuple']['get_assets_small(uint64[])void']>) {
    const result = await this.appClient.send.call(AssetLabelingParamsFactory.getAssetsSmall(params))
    return result.return as unknown as AssetLabelingReturns['get_assets_small(uint64[])void']
  }

  /**
   * Makes a readonly (simulated) call to the AssetLabeling smart contract using the `get_asset_full(uint64)(string,string,string,uint64,uint8,address,address,address,address,byte[],uint64,string[])` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getAssetFull(params: CallParams<AssetLabelingArgs['obj']['get_asset_full(uint64)(string,string,string,uint64,uint8,address,address,address,address,byte[],uint64,string[])'] | AssetLabelingArgs['tuple']['get_asset_full(uint64)(string,string,string,uint64,uint8,address,address,address,address,byte[],uint64,string[])']>) {
    const result = await this.appClient.send.call(AssetLabelingParamsFactory.getAssetFull(params))
    return result.return as unknown as AssetLabelingReturns['get_asset_full(uint64)(string,string,string,uint64,uint8,address,address,address,address,byte[],uint64,string[])']
  }

  /**
   * Makes a readonly (simulated) call to the AssetLabeling smart contract using the `get_assets_full(uint64[])void` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getAssetsFull(params: CallParams<AssetLabelingArgs['obj']['get_assets_full(uint64[])void'] | AssetLabelingArgs['tuple']['get_assets_full(uint64[])void']>) {
    const result = await this.appClient.send.call(AssetLabelingParamsFactory.getAssetsFull(params))
    return result.return as unknown as AssetLabelingReturns['get_assets_full(uint64[])void']
  }

  /**
   * Methods to access state for the current AssetLabeling app
   */
  state = {
    /**
     * Methods to access global state for the current AssetLabeling app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          admin: new BinaryStateValue(result.admin),
        }
      },
      /**
       * Get the current value of the admin key in global state
       */
      admin: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("admin")) as Uint8Array | undefined) },
    },
    /**
     * Methods to access box state for the current AssetLabeling app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the labels map in box state
       */
      labels: {
        /**
         * Get all current values of the labels map in box state
         */
        getMap: async (): Promise<Map<string, LabelDescriptor>> => { return (await this.appClient.state.box.getMap("labels")) as Map<string, LabelDescriptor> },
        /**
         * Get a current value of the labels map by key from box state
         */
        value: async (key: string): Promise<LabelDescriptor | undefined> => { return await this.appClient.state.box.getMapValue("labels", key) as LabelDescriptor | undefined },
      },
      /**
       * Get values from the assets map in box state
       */
      assets: {
        /**
         * Get all current values of the assets map in box state
         */
        getMap: async (): Promise<Map<bigint, string[]>> => { return (await this.appClient.state.box.getMap("assets")) as Map<bigint, string[]> },
        /**
         * Get a current value of the assets map by key from box state
         */
        value: async (key: bigint): Promise<string[] | undefined> => { return await this.appClient.state.box.getMapValue("assets", key) as string[] | undefined },
      },
      /**
       * Get values from the operators map in box state
       */
      operators: {
        /**
         * Get all current values of the operators map in box state
         */
        getMap: async (): Promise<Map<Uint8Array, string[]>> => { return (await this.appClient.state.box.getMap("operators")) as Map<Uint8Array, string[]> },
        /**
         * Get a current value of the operators map by key from box state
         */
        value: async (key: Uint8Array | string): Promise<string[] | undefined> => { return await this.appClient.state.box.getMapValue("operators", key) as string[] | undefined },
      },
    },
  }

  public newGroup(): AssetLabelingComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a change_admin(account)void method call against the AssetLabeling contract
       */
      changeAdmin(params: CallParams<AssetLabelingArgs['obj']['change_admin(account)void'] | AssetLabelingArgs['tuple']['change_admin(account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.changeAdmin(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a add_label(string,string)void method call against the AssetLabeling contract
       */
      addLabel(params: CallParams<AssetLabelingArgs['obj']['add_label(string,string)void'] | AssetLabelingArgs['tuple']['add_label(string,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.addLabel(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a remove_label(string)void method call against the AssetLabeling contract
       */
      removeLabel(params: CallParams<AssetLabelingArgs['obj']['remove_label(string)void'] | AssetLabelingArgs['tuple']['remove_label(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.removeLabel(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a get_label(string)(string,uint64,uint64) method call against the AssetLabeling contract
       */
      getLabel(params: CallParams<AssetLabelingArgs['obj']['get_label(string)(string,uint64,uint64)'] | AssetLabelingArgs['tuple']['get_label(string)(string,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getLabel(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_label(string)(string,uint64,uint64)', v))
        return this
      },
      /**
       * Add a log_labels(string[])void method call against the AssetLabeling contract
       */
      logLabels(params: CallParams<AssetLabelingArgs['obj']['log_labels(string[])void'] | AssetLabelingArgs['tuple']['log_labels(string[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.logLabels(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a add_operator_to_label(account,string)void method call against the AssetLabeling contract
       */
      addOperatorToLabel(params: CallParams<AssetLabelingArgs['obj']['add_operator_to_label(account,string)void'] | AssetLabelingArgs['tuple']['add_operator_to_label(account,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.addOperatorToLabel(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a remove_operator_from_label(account,string)void method call against the AssetLabeling contract
       */
      removeOperatorFromLabel(params: CallParams<AssetLabelingArgs['obj']['remove_operator_from_label(account,string)void'] | AssetLabelingArgs['tuple']['remove_operator_from_label(account,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.removeOperatorFromLabel(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a get_operator_labels(account)string[] method call against the AssetLabeling contract
       */
      getOperatorLabels(params: CallParams<AssetLabelingArgs['obj']['get_operator_labels(account)string[]'] | AssetLabelingArgs['tuple']['get_operator_labels(account)string[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getOperatorLabels(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_operator_labels(account)string[]', v))
        return this
      },
      /**
       * Add a add_label_to_asset(string,asset)void method call against the AssetLabeling contract
       */
      addLabelToAsset(params: CallParams<AssetLabelingArgs['obj']['add_label_to_asset(string,asset)void'] | AssetLabelingArgs['tuple']['add_label_to_asset(string,asset)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.addLabelToAsset(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a remove_label_from_asset(string,asset)void method call against the AssetLabeling contract
       */
      removeLabelFromAsset(params: CallParams<AssetLabelingArgs['obj']['remove_label_from_asset(string,asset)void'] | AssetLabelingArgs['tuple']['remove_label_from_asset(string,asset)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.removeLabelFromAsset(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a get_asset_labels(asset)string[] method call against the AssetLabeling contract
       */
      getAssetLabels(params: CallParams<AssetLabelingArgs['obj']['get_asset_labels(asset)string[]'] | AssetLabelingArgs['tuple']['get_asset_labels(asset)string[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getAssetLabels(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_asset_labels(asset)string[]', v))
        return this
      },
      /**
       * Add a get_assets_labels(uint64[])string[][] method call against the AssetLabeling contract
       */
      getAssetsLabels(params: CallParams<AssetLabelingArgs['obj']['get_assets_labels(uint64[])string[][]'] | AssetLabelingArgs['tuple']['get_assets_labels(uint64[])string[][]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getAssetsLabels(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_assets_labels(uint64[])string[][]', v))
        return this
      },
      /**
       * Add a get_asset_micro(uint64)(string,uint8) method call against the AssetLabeling contract
       */
      getAssetMicro(params: CallParams<AssetLabelingArgs['obj']['get_asset_micro(uint64)(string,uint8)'] | AssetLabelingArgs['tuple']['get_asset_micro(uint64)(string,uint8)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getAssetMicro(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_asset_micro(uint64)(string,uint8)', v))
        return this
      },
      /**
       * Add a get_assets_micro(uint64[])void method call against the AssetLabeling contract
       */
      getAssetsMicro(params: CallParams<AssetLabelingArgs['obj']['get_assets_micro(uint64[])void'] | AssetLabelingArgs['tuple']['get_assets_micro(uint64[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getAssetsMicro(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a get_asset_micro_labels(uint64)(string,uint8,string[]) method call against the AssetLabeling contract
       */
      getAssetMicroLabels(params: CallParams<AssetLabelingArgs['obj']['get_asset_micro_labels(uint64)(string,uint8,string[])'] | AssetLabelingArgs['tuple']['get_asset_micro_labels(uint64)(string,uint8,string[])']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getAssetMicroLabels(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_asset_micro_labels(uint64)(string,uint8,string[])', v))
        return this
      },
      /**
       * Add a get_assets_micro_labels(uint64[])void method call against the AssetLabeling contract
       */
      getAssetsMicroLabels(params: CallParams<AssetLabelingArgs['obj']['get_assets_micro_labels(uint64[])void'] | AssetLabelingArgs['tuple']['get_assets_micro_labels(uint64[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getAssetsMicroLabels(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a get_asset_text(uint64)(string,string,string,string[]) method call against the AssetLabeling contract
       */
      getAssetText(params: CallParams<AssetLabelingArgs['obj']['get_asset_text(uint64)(string,string,string,string[])'] | AssetLabelingArgs['tuple']['get_asset_text(uint64)(string,string,string,string[])']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getAssetText(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_asset_text(uint64)(string,string,string,string[])', v))
        return this
      },
      /**
       * Add a get_assets_text(uint64[])void method call against the AssetLabeling contract
       */
      getAssetsText(params: CallParams<AssetLabelingArgs['obj']['get_assets_text(uint64[])void'] | AssetLabelingArgs['tuple']['get_assets_text(uint64[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getAssetsText(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a get_asset_text_labels(uint64)(string,string,string) method call against the AssetLabeling contract
       */
      getAssetTextLabels(params: CallParams<AssetLabelingArgs['obj']['get_asset_text_labels(uint64)(string,string,string)'] | AssetLabelingArgs['tuple']['get_asset_text_labels(uint64)(string,string,string)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getAssetTextLabels(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_asset_text_labels(uint64)(string,string,string)', v))
        return this
      },
      /**
       * Add a get_assets_text_labels(uint64[])void method call against the AssetLabeling contract
       */
      getAssetsTextLabels(params: CallParams<AssetLabelingArgs['obj']['get_assets_text_labels(uint64[])void'] | AssetLabelingArgs['tuple']['get_assets_text_labels(uint64[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getAssetsTextLabels(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a get_asset_small(uint64)(string,string,uint8,uint64,bool,bool,string[]) method call against the AssetLabeling contract
       */
      getAssetSmall(params: CallParams<AssetLabelingArgs['obj']['get_asset_small(uint64)(string,string,uint8,uint64,bool,bool,string[])'] | AssetLabelingArgs['tuple']['get_asset_small(uint64)(string,string,uint8,uint64,bool,bool,string[])']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getAssetSmall(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_asset_small(uint64)(string,string,uint8,uint64,bool,bool,string[])', v))
        return this
      },
      /**
       * Add a get_assets_small(uint64[])void method call against the AssetLabeling contract
       */
      getAssetsSmall(params: CallParams<AssetLabelingArgs['obj']['get_assets_small(uint64[])void'] | AssetLabelingArgs['tuple']['get_assets_small(uint64[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getAssetsSmall(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a get_asset_full(uint64)(string,string,string,uint64,uint8,address,address,address,address,byte[],uint64,string[]) method call against the AssetLabeling contract
       */
      getAssetFull(params: CallParams<AssetLabelingArgs['obj']['get_asset_full(uint64)(string,string,string,uint64,uint8,address,address,address,address,byte[],uint64,string[])'] | AssetLabelingArgs['tuple']['get_asset_full(uint64)(string,string,string,uint64,uint8,address,address,address,address,byte[],uint64,string[])']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getAssetFull(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_asset_full(uint64)(string,string,string,uint64,uint8,address,address,address,address,byte[],uint64,string[])', v))
        return this
      },
      /**
       * Add a get_assets_full(uint64[])void method call against the AssetLabeling contract
       */
      getAssetsFull(params: CallParams<AssetLabelingArgs['obj']['get_assets_full(uint64[])void'] | AssetLabelingArgs['tuple']['get_assets_full(uint64[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getAssetsFull(params)))
        resultMappers.push(undefined)
        return this
      },
      get update() {
        return {
          bare: (params?: AppClientBareCallParams & AppClientCompilationParams ) => {
            promiseChain = promiseChain.then(async () => composer.addAppUpdate(await client.params.update.bare(params)))
            return this
          },
        }
      },
      get delete() {
        return {
          bare: (params?: AppClientBareCallParams ) => {
            promiseChain = promiseChain.then(() => composer.addAppDelete(client.params.delete.bare(params)))
            return this
          },
        }
      },
      /**
       * Add a clear state call to the AssetLabeling contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as AssetLabelingComposer
  }
}
export type AssetLabelingComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the change_admin(account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  changeAdmin(params?: CallParams<AssetLabelingArgs['obj']['change_admin(account)void'] | AssetLabelingArgs['tuple']['change_admin(account)void']>): AssetLabelingComposer<[...TReturns, AssetLabelingReturns['change_admin(account)void'] | undefined]>

  /**
   * Calls the add_label(string,string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addLabel(params?: CallParams<AssetLabelingArgs['obj']['add_label(string,string)void'] | AssetLabelingArgs['tuple']['add_label(string,string)void']>): AssetLabelingComposer<[...TReturns, AssetLabelingReturns['add_label(string,string)void'] | undefined]>

  /**
   * Calls the remove_label(string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  removeLabel(params?: CallParams<AssetLabelingArgs['obj']['remove_label(string)void'] | AssetLabelingArgs['tuple']['remove_label(string)void']>): AssetLabelingComposer<[...TReturns, AssetLabelingReturns['remove_label(string)void'] | undefined]>

  /**
   * Calls the get_label(string)(string,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getLabel(params?: CallParams<AssetLabelingArgs['obj']['get_label(string)(string,uint64,uint64)'] | AssetLabelingArgs['tuple']['get_label(string)(string,uint64,uint64)']>): AssetLabelingComposer<[...TReturns, AssetLabelingReturns['get_label(string)(string,uint64,uint64)'] | undefined]>

  /**
   * Calls the log_labels(string[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  logLabels(params?: CallParams<AssetLabelingArgs['obj']['log_labels(string[])void'] | AssetLabelingArgs['tuple']['log_labels(string[])void']>): AssetLabelingComposer<[...TReturns, AssetLabelingReturns['log_labels(string[])void'] | undefined]>

  /**
   * Calls the add_operator_to_label(account,string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addOperatorToLabel(params?: CallParams<AssetLabelingArgs['obj']['add_operator_to_label(account,string)void'] | AssetLabelingArgs['tuple']['add_operator_to_label(account,string)void']>): AssetLabelingComposer<[...TReturns, AssetLabelingReturns['add_operator_to_label(account,string)void'] | undefined]>

  /**
   * Calls the remove_operator_from_label(account,string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  removeOperatorFromLabel(params?: CallParams<AssetLabelingArgs['obj']['remove_operator_from_label(account,string)void'] | AssetLabelingArgs['tuple']['remove_operator_from_label(account,string)void']>): AssetLabelingComposer<[...TReturns, AssetLabelingReturns['remove_operator_from_label(account,string)void'] | undefined]>

  /**
   * Calls the get_operator_labels(account)string[] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getOperatorLabels(params?: CallParams<AssetLabelingArgs['obj']['get_operator_labels(account)string[]'] | AssetLabelingArgs['tuple']['get_operator_labels(account)string[]']>): AssetLabelingComposer<[...TReturns, AssetLabelingReturns['get_operator_labels(account)string[]'] | undefined]>

  /**
   * Calls the add_label_to_asset(string,asset)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addLabelToAsset(params?: CallParams<AssetLabelingArgs['obj']['add_label_to_asset(string,asset)void'] | AssetLabelingArgs['tuple']['add_label_to_asset(string,asset)void']>): AssetLabelingComposer<[...TReturns, AssetLabelingReturns['add_label_to_asset(string,asset)void'] | undefined]>

  /**
   * Calls the remove_label_from_asset(string,asset)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  removeLabelFromAsset(params?: CallParams<AssetLabelingArgs['obj']['remove_label_from_asset(string,asset)void'] | AssetLabelingArgs['tuple']['remove_label_from_asset(string,asset)void']>): AssetLabelingComposer<[...TReturns, AssetLabelingReturns['remove_label_from_asset(string,asset)void'] | undefined]>

  /**
   * Calls the get_asset_labels(asset)string[] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getAssetLabels(params?: CallParams<AssetLabelingArgs['obj']['get_asset_labels(asset)string[]'] | AssetLabelingArgs['tuple']['get_asset_labels(asset)string[]']>): AssetLabelingComposer<[...TReturns, AssetLabelingReturns['get_asset_labels(asset)string[]'] | undefined]>

  /**
   * Calls the get_assets_labels(uint64[])string[][] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getAssetsLabels(params?: CallParams<AssetLabelingArgs['obj']['get_assets_labels(uint64[])string[][]'] | AssetLabelingArgs['tuple']['get_assets_labels(uint64[])string[][]']>): AssetLabelingComposer<[...TReturns, AssetLabelingReturns['get_assets_labels(uint64[])string[][]'] | undefined]>

  /**
   * Calls the get_asset_micro(uint64)(string,uint8) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getAssetMicro(params?: CallParams<AssetLabelingArgs['obj']['get_asset_micro(uint64)(string,uint8)'] | AssetLabelingArgs['tuple']['get_asset_micro(uint64)(string,uint8)']>): AssetLabelingComposer<[...TReturns, AssetLabelingReturns['get_asset_micro(uint64)(string,uint8)'] | undefined]>

  /**
   * Calls the get_assets_micro(uint64[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getAssetsMicro(params?: CallParams<AssetLabelingArgs['obj']['get_assets_micro(uint64[])void'] | AssetLabelingArgs['tuple']['get_assets_micro(uint64[])void']>): AssetLabelingComposer<[...TReturns, AssetLabelingReturns['get_assets_micro(uint64[])void'] | undefined]>

  /**
   * Calls the get_asset_micro_labels(uint64)(string,uint8,string[]) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getAssetMicroLabels(params?: CallParams<AssetLabelingArgs['obj']['get_asset_micro_labels(uint64)(string,uint8,string[])'] | AssetLabelingArgs['tuple']['get_asset_micro_labels(uint64)(string,uint8,string[])']>): AssetLabelingComposer<[...TReturns, AssetLabelingReturns['get_asset_micro_labels(uint64)(string,uint8,string[])'] | undefined]>

  /**
   * Calls the get_assets_micro_labels(uint64[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getAssetsMicroLabels(params?: CallParams<AssetLabelingArgs['obj']['get_assets_micro_labels(uint64[])void'] | AssetLabelingArgs['tuple']['get_assets_micro_labels(uint64[])void']>): AssetLabelingComposer<[...TReturns, AssetLabelingReturns['get_assets_micro_labels(uint64[])void'] | undefined]>

  /**
   * Calls the get_asset_text(uint64)(string,string,string,string[]) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getAssetText(params?: CallParams<AssetLabelingArgs['obj']['get_asset_text(uint64)(string,string,string,string[])'] | AssetLabelingArgs['tuple']['get_asset_text(uint64)(string,string,string,string[])']>): AssetLabelingComposer<[...TReturns, AssetLabelingReturns['get_asset_text(uint64)(string,string,string,string[])'] | undefined]>

  /**
   * Calls the get_assets_text(uint64[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getAssetsText(params?: CallParams<AssetLabelingArgs['obj']['get_assets_text(uint64[])void'] | AssetLabelingArgs['tuple']['get_assets_text(uint64[])void']>): AssetLabelingComposer<[...TReturns, AssetLabelingReturns['get_assets_text(uint64[])void'] | undefined]>

  /**
   * Calls the get_asset_text_labels(uint64)(string,string,string) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getAssetTextLabels(params?: CallParams<AssetLabelingArgs['obj']['get_asset_text_labels(uint64)(string,string,string)'] | AssetLabelingArgs['tuple']['get_asset_text_labels(uint64)(string,string,string)']>): AssetLabelingComposer<[...TReturns, AssetLabelingReturns['get_asset_text_labels(uint64)(string,string,string)'] | undefined]>

  /**
   * Calls the get_assets_text_labels(uint64[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getAssetsTextLabels(params?: CallParams<AssetLabelingArgs['obj']['get_assets_text_labels(uint64[])void'] | AssetLabelingArgs['tuple']['get_assets_text_labels(uint64[])void']>): AssetLabelingComposer<[...TReturns, AssetLabelingReturns['get_assets_text_labels(uint64[])void'] | undefined]>

  /**
   * Calls the get_asset_small(uint64)(string,string,uint8,uint64,bool,bool,string[]) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getAssetSmall(params?: CallParams<AssetLabelingArgs['obj']['get_asset_small(uint64)(string,string,uint8,uint64,bool,bool,string[])'] | AssetLabelingArgs['tuple']['get_asset_small(uint64)(string,string,uint8,uint64,bool,bool,string[])']>): AssetLabelingComposer<[...TReturns, AssetLabelingReturns['get_asset_small(uint64)(string,string,uint8,uint64,bool,bool,string[])'] | undefined]>

  /**
   * Calls the get_assets_small(uint64[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getAssetsSmall(params?: CallParams<AssetLabelingArgs['obj']['get_assets_small(uint64[])void'] | AssetLabelingArgs['tuple']['get_assets_small(uint64[])void']>): AssetLabelingComposer<[...TReturns, AssetLabelingReturns['get_assets_small(uint64[])void'] | undefined]>

  /**
   * Calls the get_asset_full(uint64)(string,string,string,uint64,uint8,address,address,address,address,byte[],uint64,string[]) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getAssetFull(params?: CallParams<AssetLabelingArgs['obj']['get_asset_full(uint64)(string,string,string,uint64,uint8,address,address,address,address,byte[],uint64,string[])'] | AssetLabelingArgs['tuple']['get_asset_full(uint64)(string,string,string,uint64,uint8,address,address,address,address,byte[],uint64,string[])']>): AssetLabelingComposer<[...TReturns, AssetLabelingReturns['get_asset_full(uint64)(string,string,string,uint64,uint8,address,address,address,address,byte[],uint64,string[])'] | undefined]>

  /**
   * Calls the get_assets_full(uint64[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getAssetsFull(params?: CallParams<AssetLabelingArgs['obj']['get_assets_full(uint64[])void'] | AssetLabelingArgs['tuple']['get_assets_full(uint64[])void']>): AssetLabelingComposer<[...TReturns, AssetLabelingReturns['get_assets_full(uint64[])void'] | undefined]>

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the AssetLabeling smart contract using a bare call.
     *
     * @param args The arguments for the bare call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    bare(params?: AppClientBareCallParams ): AssetLabelingComposer<[...TReturns, undefined]>
  }

  /**
   * Gets available update methods
   */
  readonly update: {
    /**
     * Updates an existing instance of the AssetLabeling smart contract using a bare call.
     *
     * @param args The arguments for the bare call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    bare(params?: AppClientBareCallParams ): AssetLabelingComposer<[...TReturns, undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the AssetLabeling smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): AssetLabelingComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): AssetLabelingComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<AssetLabelingComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<AssetLabelingComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<AssetLabelingComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<AssetLabelingComposerResults<TReturns>>
}
export type AssetLabelingComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

